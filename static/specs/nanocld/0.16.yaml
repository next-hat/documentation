openapi: 3.1.0
info:
  title: Nanocl Daemon
  description: |
    The `Nanocl Daemon` is an `HTTP REST API`.<br />
    It is the `API` the `Nanocl Client` uses, so everything the `Nanocl Client` can do can be done with the `API`.

    Most of the client's commands map directly to API endpoints e.g: `nanocl ps` is `GET /processes`.<br />
    The notable exception is running `Cargo`, which consists of several `API` calls.


    ## OpenAPI Specification
    This API is documented in **OpenAPI format** using [Utoipa](https://github.com/juhaku/utoipa)<br />
    The specification is generated automatically when running in development only.<br />
    When releasing a version, the generated file is transferred to our [Documentation](https://github.com/next-hat/documentation).


    ## Cross-Origin Resource Sharing
    This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).<br />
    And that allows cross-domain communication from the browser.<br />
    All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.
  contact:
    name: nanocl contributors
    email: team@next-hat.com
  license:
    name: MIT OR Apache-2.0
  version: v0.16.0
servers:
- url: /{Version}
  variables:
    Version:
      default: v0.16.0
      description: API version
paths:
  /_ping:
    head:
      tags:
      - System
      summary: Ping the server to check if it is up
      operationId: get_ping
      responses:
        '202':
          description: Server is up
  /cargoes:
    get:
      tags:
      - Cargoes
      summary: List cargoes with optional filter
      operationId: list_cargo
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "name": { "eq": "test" } } } }'
      - name: namespace
        in: query
        description: Namespace where the cargoes belongs default to 'global'
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: List of cargoes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CargoSummary'
    post:
      tags:
      - Cargoes
      summary: Create a new cargo by it specification
      operationId: create_cargo
      parameters:
      - name: namespace
        in: query
        description: Namespace where to create the cargo default to 'global'
        required: false
        schema:
          type:
          - string
          - 'null'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CargoSpecPartial'
        required: true
      responses:
        '201':
          description: Cargo created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cargo'
        '409':
          description: Cargo already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /cargoes/count:
    get:
      tags:
      - Cargoes
      summary: Count cargoes with optional filter
      operationId: count_cargo
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "name": { "eq": "my-cargo" } } } }'
      - name: namespace
        in: query
        description: Namespace where the cargoes belongs default to 'global'
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: Count result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericCount'
  /cargoes/{cargo_name}/exec:
    post:
      tags:
      - Cargoes
      operationId: create_exec_command
      parameters:
      - name: Name
        in: path
        description: Name of the cargo
        required: true
        schema:
          type: string
      - name: Namespace
        in: query
        description: Namespace of the cargo
        required: false
        schema:
          type:
          - string
          - 'null'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExecOptions'
        required: true
      responses:
        '200':
          description: Event Stream of the command output
          content:
            text/event-stream: {}
        '404':
          description: Cargo does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /cargoes/{name}:
    put:
      tags:
      - Cargoes
      summary: Update a cargo by it's new specification and create a history record
      operationId: put_cargo
      parameters:
      - name: name
        in: path
        description: Name of the cargo
        required: true
        schema:
          type: string
      - name: namespace
        in: query
        description: Namespace where the cargoes belongs default to 'global'
        required: false
        schema:
          type:
          - string
          - 'null'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CargoSpecPartial'
        required: true
      responses:
        '200':
          description: Cargo updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cargo'
        '404':
          description: Cargo does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags:
      - Cargoes
      summary: Delete a cargo by it's name
      operationId: delete_cargo
      parameters:
      - name: name
        in: path
        description: Name of the cargo
        required: true
        schema:
          type: string
      - name: force
        in: query
        description: If true forces the delete operation even if the cargo is started
        required: true
        schema:
          type: boolean
      - name: namespace
        in: query
        description: Namespace where the cargoes belongs default to 'global'
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '202':
          description: Cargo deleted
        '404':
          description: Cargo does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    patch:
      tags:
      - Cargoes
      summary: Patch a cargo with it's specification meaning merging current spec with the new one and add history record
      operationId: patch_cargo
      parameters:
      - name: name
        in: path
        description: Name of the cargo
        required: true
        schema:
          type: string
      - name: namespace
        in: query
        description: Namespace where the cargoes belongs default to 'global'
        required: false
        schema:
          type:
          - string
          - 'null'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CargoSpecUpdate'
        required: true
      responses:
        '200':
          description: Cargo updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cargo'
        '404':
          description: Cargo does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /cargoes/{name}/histories:
    get:
      tags:
      - Cargoes
      summary: List cargo histories
      operationId: list_cargo_history
      parameters:
      - name: name
        in: path
        description: Name of the cargo
        required: true
        schema:
          type: string
      - name: namespace
        in: query
        description: Namespace where the cargoes belongs default to 'global'
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: List of cargo histories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CargoSpec'
        '404':
          description: Cargo does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /cargoes/{name}/histories/{key}/revert:
    patch:
      tags:
      - Cargoes
      summary: Revert a cargo to a specific history record
      operationId: revert_cargo
      parameters:
      - name: name
        in: path
        description: Name of the cargo
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: Key of the cargo history
        required: true
        schema:
          type: string
      - name: namespace
        in: query
        description: Namespace where the cargoes belongs default to 'global'
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: Cargo revert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cargo'
        '404':
          description: Cargo does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /cargoes/{name}/inspect:
    get:
      tags:
      - Cargoes
      summary: Get detailed information about a cargo by its name
      operationId: inspect_cargo
      parameters:
      - name: name
        in: path
        description: Name of the cargo
        required: true
        schema:
          type: string
      - name: namespace
        in: query
        description: Namespace where the cargoes belongs default to 'global'
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: Cargo details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CargoInspect'
  /events:
    get:
      tags:
      - Events
      summary: List events with optional filter
      operationId: list_event
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "kind": { "eq": "normal" } } } }'
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /events/count:
    get:
      tags:
      - Events
      summary: Count events with optional filter
      operationId: count_event
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "namespace_name": { "eq": "global" } } } }'
      responses:
        '200':
          description: Count result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericCount'
  /events/watch:
    post:
      tags:
      - Events
      summary: Watch on new events of all peer nodes with optional condition to stop the stream
      operationId: watch_event
      requestBody:
        content:
          application/json:
            schema:
              type:
              - array
              - 'null'
              items:
                $ref: '#/components/schemas/EventCondition'
      responses:
        '200':
          description: Event stream
          content:
            text/event-stream:
              schema:
                type: string
  /events/{key}/inspect:
    get:
      tags:
      - Events
      summary: Get detailed information about an event
      operationId: inspect_event
      parameters:
      - name: key
        in: path
        description: Key of the event
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Detailed information about the event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /exec/{id}/cargo/inspect:
    post:
      tags:
      - Exec
      summary: Inspect a command executed in a cargo
      operationId: inspect_exec_command
      parameters:
      - name: id
        in: path
        description: Exec id to inspect
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Inspect exec infos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecInspectResponse'
        '404':
          description: Exec instance does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /exec/{id}/cargo/start:
    post:
      tags:
      - Exec
      operationId: start_exec_command
      parameters:
      - name: id
        in: path
        description: Exec command id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartExecOptions'
        required: true
      responses:
        '200':
          description: Event Stream of the command output
          content:
            text/event-stream: {}
        '404':
          description: Cargo does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /info:
    get:
      tags:
      - System
      summary: Get host/node system information
      operationId: get_info
      responses:
        '200':
          description: Host/Node information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostInfo'
  /jobs:
    get:
      tags:
      - Jobs
      summary: List jobs with optional filter
      operationId: list_job
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "name": { "eq": "job-example" } } } }'
      responses:
        '200':
          description: List of jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobSummary'
    post:
      tags:
      - Jobs
      summary: Create a new job
      operationId: create_job
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPartial'
        required: true
      responses:
        '201':
          description: Job created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '409':
          description: Job already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /jobs/count:
    get:
      tags:
      - Jobs
      summary: Count jobs
      operationId: count_job
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "key": { "eq": "job-example" } } } }'
      responses:
        '200':
          description: Count result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericCount'
  /jobs/{name}:
    delete:
      tags:
      - Jobs
      summary: Delete a job by name
      operationId: delete_job
      parameters:
      - name: name
        in: path
        description: Name of the job
        required: true
        schema:
          type: string
      responses:
        '202':
          description: Job deleted
        '404':
          description: Job does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /jobs/{name}/inspect:
    get:
      tags:
      - Jobs
      summary: Get detailed information about a job
      operationId: inspect_job
      parameters:
      - name: name
        in: path
        description: Name of the job
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Job details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobInspect'
  /metrics:
    get:
      tags:
      - Metrics
      summary: List metrics with optional filter
      operationId: list_metric
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "kind": { "eq": "CPU" } } } }'
      responses:
        '200':
          description: List of metrics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Metric'
    post:
      tags:
      - Metrics
      summary: Create a new metric
      operationId: create_metric
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricPartial'
        required: true
      responses:
        '201':
          description: Metric created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metric'
        '409':
          description: Metric already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /metrics/count:
    get:
      tags:
      - Metrics
      summary: Count metrics with optional filter
      operationId: count_metric
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "kind": { "eq": "ncproxy.io/http" } } } }'
      responses:
        '200':
          description: Count result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericCount'
  /metrics/{key}/inspect:
    get:
      tags:
      - Metrics
      summary: Get detailed information about a metric
      operationId: inspect_metric
      parameters:
      - name: key
        in: path
        description: Key of the metric
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Detailed information about a metric
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metric'
        '404':
          description: Metric not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /namespaces:
    get:
      tags:
      - Namespaces
      summary: List namespaces with optional filter
      operationId: list_namespace
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "name": { "eq": "test" } } } }'
      responses:
        '200':
          description: List of namespace
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NamespaceSummary'
    post:
      tags:
      - Namespaces
      summary: Create a new namespace
      operationId: create_namespace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamespacePartial'
        required: true
      responses:
        '200':
          description: The created namespace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
        '409':
          description: Namespace already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /namespaces/count:
    get:
      tags:
      - Namespaces
      summary: Count namespaces
      operationId: count_namespace
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "name": { "eq": "global" } } } }'
      responses:
        '200':
          description: Count result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericCount'
  /namespaces/{name}:
    delete:
      tags:
      - Namespaces
      summary: Delete a namespace
      operationId: delete_namespace
      parameters:
      - name: name
        in: path
        description: Name of the namespace to delete
        required: true
        schema:
          type: string
      responses:
        '202':
          description: Namespace have been deleted
        '404':
          description: Namespace is not existing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /namespaces/{name}/inspect:
    get:
      tags:
      - Namespaces
      summary: Get detailed information about a namespace
      operationId: inspect_namespace
      parameters:
      - name: name
        in: path
        description: The namespace name to inspect
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Detailed information about a namespace
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NamespaceInspect'
        '404':
          description: Namespace doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /nodes:
    get:
      tags:
      - Nodes
      summary: List nodes
      operationId: list_node
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "name": { "eq": "test" } } } }'
      responses:
        '200':
          description: List of nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
  /nodes/count:
    get:
      tags:
      - Nodes
      summary: Count nodes
      operationId: count_node
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "name": { "eq": "test" } } } }'
      responses:
        '200':
          description: List of nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GenericCount'
  /nodes/ws:
    get:
      tags:
      - Nodes
      summary: Websocket endpoint for communication between nodes used internally
      operationId: node_ws
      responses:
        '101':
          description: Websocket connection
  /processes:
    get:
      tags:
      - Processes
      summary: List processes with optional filter
      operationId: list_processes
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "where": { "name": { "eq": "test" } } }'
      responses:
        '200':
          description: List of instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Process'
  /processes/count:
    get:
      tags:
      - Processes
      summary: Count processes
      operationId: count_processes
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "name": { "eq": "global" } } } }'
      responses:
        '200':
          description: Count result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericCount'
  /processes/{kind}/{name}/kill:
    post:
      tags:
      - Processes
      summary: Send a signal to all processes of given kind and name (cargo, job, vm)
      operationId: kill_processes
      parameters:
      - name: kind
        in: path
        description: Kind of the process
        required: true
        schema:
          type: string
        example: cargo
      - name: name
        in: path
        description: Name of the process
        required: true
        schema:
          type: string
        example: deploy-example
      - name: namespace
        in: query
        description: Namespace where the process belongs if needed
        required: false
        schema:
          type:
          - string
          - 'null'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CargoKillOptions'
        required: true
      responses:
        '200':
          description: Process instances killed
  /processes/{kind}/{name}/logs:
    get:
      tags:
      - Processes
      summary: Get logs of processes of given kind and name (cargo, job, vm)
      operationId: logs_processes
      parameters:
      - name: kind
        in: path
        description: Kind of the process
        required: true
        schema:
          type: string
        example: cargo
      - name: name
        in: path
        description: Name of the process
        required: true
        schema:
          type: string
        example: deploy-example
      - name: namespace
        in: query
        description: Namespace of the process
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: since
        in: query
        description: Only logs returned since timestamp
        required: false
        schema:
          type:
          - integer
          - 'null'
          format: int64
      - name: until
        in: query
        description: Only logs returned until timestamp
        required: false
        schema:
          type:
          - integer
          - 'null'
          format: int64
      - name: timestamps
        in: query
        description: Add timestamps to every log line
        required: false
        schema:
          type:
          - boolean
          - 'null'
      - name: follow
        in: query
        description: Boolean to return a stream or not
        required: false
        schema:
          type:
          - boolean
          - 'null'
      - name: tail
        in: query
        description: Only return the n last (integer) or all ('all') logs
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: Process instances logs
          content:
            application/vdn.nanocl.raw-stream: {}
  /processes/{kind}/{name}/restart:
    post:
      tags:
      - Processes
      summary: Restart all processes of given kind and name (cargo, job, vm)
      operationId: restart_processes
      parameters:
      - name: kind
        in: path
        description: Kind of the process
        required: true
        schema:
          type: string
        example: cargo
      - name: name
        in: path
        description: Name of the process
        required: true
        schema:
          type: string
        example: deploy-example
      - name: namespace
        in: query
        description: Namespace where the process belongs if needed
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '202':
          description: Process instances restarted
  /processes/{kind}/{name}/start:
    post:
      tags:
      - Processes
      summary: Start all processes of given kind and name (cargo, job, vm)
      operationId: start_processes
      parameters:
      - name: kind
        in: path
        description: Kind of the process
        required: true
        schema:
          type: string
        example: cargo
      - name: name
        in: path
        description: Name of the process
        required: true
        schema:
          type: string
        example: deploy-example
      - name: namespace
        in: query
        description: Namespace where the process belongs if needed
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '202':
          description: Process instances started
  /processes/{kind}/{name}/stats:
    get:
      tags:
      - Processes
      summary: Get stats of all processes of given kind and name (cargo, job, vm)
      operationId: stats_processes
      parameters:
      - name: kind
        in: path
        description: Kind of process
        required: true
        schema:
          type: string
        example: cargo
      - name: name
        in: path
        description: Name of the process group
        required: true
        schema:
          type: string
        example: deploy-example
      - name: namespace
        in: query
        description: Namespace where the process belongs if needed
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: stream
        in: query
        description: Return a stream of stats
        required: false
        schema:
          type:
          - boolean
          - 'null'
      - name: one_shot
        in: query
        description: Return stats only once
        required: false
        schema:
          type:
          - boolean
          - 'null'
      responses:
        '200':
          description: Process stats
          content:
            application/vdn.nanocl.raw-stream:
              schema:
                $ref: '#/components/schemas/ProcessStats'
        '404':
          description: Process does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /processes/{kind}/{name}/stop:
    post:
      tags:
      - Processes
      summary: Stop all processes of given kind and name (cargo, job, vm)
      operationId: stop_processes
      parameters:
      - name: kind
        in: path
        description: Kind of the process
        required: true
        schema:
          type: string
        example: cargo
      - name: name
        in: path
        description: Name of the process
        required: true
        schema:
          type: string
        example: deploy-example
      - name: namespace
        in: query
        description: Namespace where the process belongs if needed
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '202':
          description: Process instances stopped
  /processes/{kind}/{name}/wait:
    get:
      tags:
      - Processes
      summary: Wait for a all processes to reach a specific state
      operationId: wait_processes
      parameters:
      - name: kind
        in: path
        description: 'Kind of the process instance eg: (cargo, job, vm)'
        required: true
        schema:
          type: string
        example: cargo
      - name: name
        in: path
        description: Name of the process instance
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Process wait stream
          content:
            application/vdn.nanocl.raw-stream: {}
        '404':
          description: Process does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /processes/{name}/inspect:
    get:
      tags:
      - Processes
      summary: Get detailed information about a process by it's name
      operationId: inspect_process
      parameters:
      - name: name
        in: path
        description: Name of the process
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Process details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Process'
        '404':
          description: Process doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /processes/{name}/logs:
    get:
      tags:
      - Processes
      summary: Get logs of a single process instance by it's name or id
      operationId: logs_process
      parameters:
      - name: name
        in: path
        description: Name of the process
        required: true
        schema:
          type: string
        example: deploy-example
      - name: since
        in: query
        description: Only logs returned since timestamp
        required: false
        schema:
          type:
          - integer
          - 'null'
          format: int64
      - name: until
        in: query
        description: Only logs returned until timestamp
        required: false
        schema:
          type:
          - integer
          - 'null'
          format: int64
      - name: timestamps
        in: query
        description: Add timestamps to every log line
        required: false
        schema:
          type:
          - boolean
          - 'null'
      - name: follow
        in: query
        description: Boolean to return a stream or not
        required: false
        schema:
          type:
          - boolean
          - 'null'
      - name: tail
        in: query
        description: Only return the n last (integer) or all ('all') logs
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: Process instances logs
          content:
            application/vdn.nanocl.raw-stream: {}
  /processes/{pk}/start:
    post:
      tags:
      - Processes
      summary: Start a single process by it's name or id
      operationId: start_process_by_pk
      parameters:
      - name: pk
        in: path
        description: Pk of the process
        required: true
        schema:
          type: string
        example: '1234567890'
      responses:
        '202':
          description: Process instances started
  /resource/kinds:
    get:
      tags:
      - ResourceKinds
      summary: List resource kinds
      operationId: list_resource_kind
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "name": { "eq": "test" } } } }'
      responses:
        '200':
          description: List of jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceKind'
    post:
      tags:
      - ResourceKinds
      summary: Create a resource kind
      operationId: create_resource_kind
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceKindPartial'
        required: true
      responses:
        '201':
          description: Job created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceKind'
        '409':
          description: Resource kind already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /resource/kinds/count:
    get:
      tags:
      - ResourceKinds
      summary: Count resource kinds
      operationId: count_resource_kind
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "name": { "eq": "global" } } } }'
      responses:
        '200':
          description: Count result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericCount'
  /resource/kinds/{domain}/{name}:
    delete:
      tags:
      - ResourceKinds
      summary: Delete a resource kind
      operationId: delete_resource_kind
      parameters:
      - name: domain
        in: path
        description: Domain of the resource kind
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Name of the resource kind
        required: true
        schema:
          type: string
      responses:
        '202':
          description: Resource kind deleted
        '404':
          description: Resource kind doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /resource/kinds/{domain}/{name}/inspect:
    get:
      tags:
      - ResourceKinds
      summary: Get detailed information about a resource kind
      operationId: inspect_resource_kind
      parameters:
      - name: domain
        in: path
        description: Domain of the resource kind
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Name of the resource kind
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Details about a resource kind
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceKindInspect'
        '404':
          description: Resource kind doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /resource/kinds/{domain}/{name}/version/{version}:
    get:
      tags:
      - ResourceKinds
      summary: Get detailed information about a resource kind version
      operationId: inspect_resource_kind_version
      parameters:
      - name: domain
        in: path
        description: Domain of the resource kind
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Name of the resource kind
        required: true
        schema:
          type: string
      - name: version
        in: path
        description: Version of the resource kind
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Details about a resource kind
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceKindVersion'
        '404':
          description: Resource kind doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /resources:
    get:
      tags:
      - Resources
      summary: List resources with optional filter
      operationId: list_resource
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "kind": { "eq": "ncproxy.io/rule" } } } }'
      responses:
        '200':
          description: List of resources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
    post:
      tags:
      - Resources
      summary: Create a new resource
      operationId: create_resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourcePartial'
        required: true
      responses:
        '200':
          description: The created resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '409':
          description: Resource already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /resources/count:
    get:
      tags:
      - Resources
      summary: Count resources
      operationId: count_resource
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "name": { "eq": "global" } } } }'
      responses:
        '200':
          description: Count result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericCount'
  /resources/{name}:
    put:
      tags:
      - Resources
      summary: Create a new resource spec and add history entry
      operationId: put_resource
      parameters:
      - name: name
        in: path
        description: Name of the resource
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceUpdate'
        required: true
      responses:
        '200':
          description: Resource updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '404':
          description: Resource does not exit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags:
      - Resources
      summary: Delete a resource by name
      operationId: delete_resource
      parameters:
      - name: name
        in: path
        description: The resource name to delete
        required: true
        schema:
          type: string
      responses:
        '202':
          description: The resource and his history has been deleted
        '404':
          description: Resource doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /resources/{name}/histories:
    get:
      tags:
      - Resources
      summary: List resource history
      operationId: list_resource_history
      parameters:
      - name: name
        in: path
        description: The resource name to list history
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The resource history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceSpec'
        '404':
          description: Resource is not existing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /resources/{name}/histories/{id}/revert:
    patch:
      tags:
      - Resources
      summary: Revert a resource to a specific history
      operationId: revert_resource
      parameters:
      - name: name
        in: path
        description: The resource name to revert
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The resource history id to revert to
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The resource has been revert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '404':
          description: Resource doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /resources/{name}/inspect:
    get:
      tags:
      - Resources
      summary: Get detailed information about a resource
      operationId: inspect_resource
      parameters:
      - name: name
        in: path
        description: The resource name to inspect
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Detailed information about a resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '404':
          description: Resource doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /secrets:
    get:
      tags:
      - Secrets
      summary: List secret with optional filter
      operationId: list_secret
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "kind": { "eq": "Env" } } } }'
      responses:
        '200':
          description: List of secret
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Secret'
    post:
      tags:
      - Secrets
      summary: Create a new secret
      operationId: create_secret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretPartial'
        required: true
      responses:
        '200':
          description: List of secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
        '409':
          description: Secret already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /secrets/count:
    get:
      tags:
      - Secrets
      summary: Count secrets
      operationId: count_secret
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "name": { "eq": "global" } } } }'
      responses:
        '200':
          description: Count result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericCount'
  /secrets/{key}:
    delete:
      tags:
      - Secrets
      summary: Delete a secret
      operationId: delete_secret
      parameters:
      - name: key
        in: path
        description: Key of the secret
        required: true
        schema:
          type: string
      responses:
        '202':
          description: Secret have been deleted
        '404':
          description: Secret doesn't exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    patch:
      tags:
      - Secrets
      summary: Update a secret
      operationId: patch_secret
      parameters:
      - name: key
        in: path
        description: Key of the secret
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretUpdate'
        required: true
      responses:
        '200':
          description: Secret patched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
        '404':
          description: Secret does't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /secrets/{key}/inspect:
    get:
      tags:
      - Secrets
      summary: Get detailed information about a secret
      operationId: inspect_secret
      parameters:
      - name: key
        in: path
        description: Key of the secret
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Detailed information about a secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
        '404':
          description: Secret doesn't
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /version:
    get:
      tags:
      - System
      summary: Get version information
      operationId: get_version
      responses:
        '200':
          description: Version information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BinaryInfo'
  /vms:
    get:
      tags:
      - Vms
      summary: List virtual machines with optional filter
      operationId: list_vm
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "name": { "eq": "my-vm" } } } }'
      - name: namespace
        in: query
        description: Namespace where the virtual machine belongs default to 'global'
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: List of virtual machine
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VmSummary'
    post:
      tags:
      - Vms
      summary: Create a virtual machine
      operationId: create_vm
      parameters:
      - name: namespace
        in: query
        description: The namespace of the virtual machine
        required: false
        schema:
          type:
          - string
          - 'null'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VmSpecPartial'
        required: true
      responses:
        '200':
          description: The virtual machine has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
        '409':
          description: The virtual machine already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /vms/images:
    get:
      tags:
      - VmImages
      summary: List virtual machine images with optional filter
      operationId: list_vm_images
      parameters:
      - name: filter
        in: query
        description: Generic filter
        required: false
        schema:
          type:
          - string
          - 'null'
        example: '{ "filter": { "where": { "name": { "eq": "my-image" } } } }'
      responses:
        '200':
          description: List of vm images
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VmImage'
  /vms/images/{name}:
    delete:
      tags:
      - VmImages
      summary: Delete a virtual machine image
      operationId: delete_vm_image
      parameters:
      - name: name
        in: path
        description: The name of the vm image
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Image have been deleted
        '404':
          description: The vm image does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /vms/images/{name}/clone/{clone_name}:
    post:
      tags:
      - VmImages
      summary: Clone a virtual machine image
      operationId: clone_vm_image
      parameters:
      - name: name
        in: path
        description: The name of the vm image
        required: true
        schema:
          type: string
      - name: clone_name
        in: path
        description: The name of the clone
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: The snapshot have been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmImage'
        '404':
          description: The vm image does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /vms/images/{name}/import:
    post:
      tags:
      - VmImages
      summary: Import a virtual machine image from a file
      operationId: import_vm_image
      parameters:
      - name: name
        in: path
        description: The name of the vm image
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: Image have been imported
  /vms/images/{name}/resize:
    post:
      tags:
      - VmImages
      summary: Resize a virtual machine image
      operationId: resize_vm_image
      parameters:
      - name: name
        in: path
        description: The name of the vm image
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VmImageResizePayload'
        required: true
      responses:
        '200':
          description: The snapshot have been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmImage'
  /vms/images/{name}/snapshot/{snapshot_name}:
    post:
      tags:
      - VmImages
      summary: Create a snapshot of a virtual machine image
      operationId: snapshot_vm_image
      parameters:
      - name: name
        in: path
        description: The name of the vm image
        required: true
        schema:
          type: string
      - name: snap
        in: path
        description: The name of the snapshot
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: The snapshot have been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmImage'
  /vms/{name}:
    delete:
      tags:
      - Vms
      summary: Delete a virtual machine by name
      operationId: delete_vm
      parameters:
      - name: name
        in: path
        description: The name of the virtual machine
        required: true
        schema:
          type: string
      - name: namespace
        in: query
        description: Namespace where the virtual machine belongs default to 'global'
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: The virtual machine has been deleted
        '404':
          description: The virtual machine does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    patch:
      tags:
      - Vms
      summary: Patch a virtual machine config meaning merging current config with the new one and add history entry
      operationId: patch_vm
      parameters:
      - name: name
        in: path
        description: Name of the virtual machine
        required: true
        schema:
          type: string
      - name: namespace
        in: query
        description: Namespace where the virtual machine belongs default to 'global'
        required: false
        schema:
          type:
          - string
          - 'null'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VmSpecUpdate'
        required: true
      responses:
        '200':
          description: Updated virtual machine
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
        '404':
          description: Virtual machine not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /vms/{name}/attach:
    get:
      tags:
      - Vms
      summary: Attach to a virtual machine via websocket
      operationId: vm_attach
      parameters:
      - name: name
        in: path
        description: Name of the virtual machine
        required: true
        schema:
          type: string
      - name: namespace
        in: query
        description: Namespace where the virtual machine belongs default to 'global'
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '101':
          description: Websocket connection
  /vms/{name}/histories:
    get:
      tags:
      - Vms
      summary: List virtual machine histories
      operationId: list_vm_history
      parameters:
      - name: name
        in: path
        description: The name of the virtual machine
        required: true
        schema:
          type: string
      - name: namespace
        in: query
        description: Namespace where the virtual machine belongs default to 'global'
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: The virtual machine histories have been listed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VmSpec'
        '404':
          description: The virtual machine does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /vms/{name}/inspect:
    get:
      tags:
      - Vms
      summary: Get detailed information about a virtual machine
      operationId: inspect_vm
      parameters:
      - name: name
        in: path
        description: The name of the virtual machine
        required: true
        schema:
          type: string
      - name: namespace
        in: query
        description: Namespace where the virtual machine belongs default to 'global'
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: Detailed information about a virtual machine
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmInspect'
        '404':
          description: The virtual machine does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
components:
  schemas:
    Address:
      type: object
      description: Address represents an IPv4 or IPv6 IP address.
      properties:
        Addr:
          type:
          - string
          - 'null'
          description: IP address.
        PrefixLen:
          type:
          - integer
          - 'null'
          format: int64
          description: Mask length of the IP address.
    Any:
      oneOf:
      - type: string
      - type: number
        format: double
      - type: boolean
      - type: array
        items:
          $ref: '#/components/schemas/Primitive'
      - type: object
        additionalProperties:
          $ref: '#/components/schemas/Primitive'
        propertyNames:
          type: string
      description: Helper to generate have Any type for [OpenApi](OpenApi) useful for dynamic json objects like [ResourceSpec](ResourceSpec)
    ApiError:
      type: object
      description: |-
        When returning a [HttpError](nanocl_error::http::HttpError)
        the status code is stripped and the error
        is returned as a json object with the message
        field set to the error message.
      required:
      - msg
      properties:
        msg:
          type: string
    BinaryInfo:
      type: object
      description: Details about the binary
      required:
      - Arch
      - Channel
      - Version
      - CommitId
      properties:
        Arch:
          type: string
          description: Arch is the architecture of the current binary
        Channel:
          type: string
          description: Channel is the channel of the current binary
        Version:
          type: string
          description: Version is the version of the current binary
        CommitId:
          type: string
          description: CommitID is the commit id of the current binary
    BlkioStats:
      type: object
      description: I/O statistics for the container.
      properties:
        io_service_bytes_recursive:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/BlkioStatsEntry'
        io_serviced_recursive:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/BlkioStatsEntry'
        io_queue_recursive:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/BlkioStatsEntry'
        io_service_time_recursive:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/BlkioStatsEntry'
        io_wait_time_recursive:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/BlkioStatsEntry'
        io_merged_recursive:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/BlkioStatsEntry'
        io_time_recursive:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/BlkioStatsEntry'
        sectors_recursive:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/BlkioStatsEntry'
    BlkioStatsEntry:
      type: object
      required:
      - major
      - minor
      - op
      - value
      properties:
        major:
          type: integer
          format: int64
          minimum: 0
        minor:
          type: integer
          format: int64
          minimum: 0
        op:
          type: string
        value:
          type: integer
          format: int64
          minimum: 0
    CPUStats:
      type: object
      description: General CPU statistics for the container.
      required:
      - cpu_usage
      - throttling_data
      properties:
        cpu_usage:
          $ref: '#/components/schemas/CPUUsage'
        system_cpu_usage:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        online_cpus:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        throttling_data:
          $ref: '#/components/schemas/ThrottlingData'
    CPUUsage:
      type: object
      description: CPU usage statistics for the container.
      required:
      - usage_in_usermode
      - total_usage
      - usage_in_kernelmode
      properties:
        percpu_usage:
          type:
          - array
          - 'null'
          items:
            type: integer
            format: int64
            minimum: 0
        usage_in_usermode:
          type: integer
          format: int64
          minimum: 0
        total_usage:
          type: integer
          format: int64
          minimum: 0
        usage_in_kernelmode:
          type: integer
          format: int64
          minimum: 0
    Cargo:
      type: object
      description: |-
        A Cargo is a replicable container
        It is used to run one or multiple instances of the same container
        You can define the number of replicas you want to run
        You can also define the minimum and maximum number of replicas
        The cluster will automatically scale the number of replicas to match the number of replicas you want
        Cargo contain a specification which is used to create the container
        The specification can be updated and the old specification will be kept in the history
        That way you can rollback to a previous specification quickly
      required:
      - NamespaceName
      - CreatedAt
      - Status
      - Spec
      properties:
        NamespaceName:
          type: string
          description: Name of the namespace
        CreatedAt:
          type: string
          format: date-time
          description: When the cargo was created
        Status:
          $ref: '#/components/schemas/ObjPsStatus'
          description: Status of the cargo
        Spec:
          $ref: '#/components/schemas/CargoSpec'
          description: Specification of the cargo
    CargoInspect:
      type: object
      description: |-
        Cargo Inspect is a detailed view of a cargo
        It contains all the information about the cargo
        It also contains the list of containers
      required:
      - NamespaceName
      - CreatedAt
      - InstanceTotal
      - InstanceRunning
      - Status
      - Spec
      - Instances
      properties:
        NamespaceName:
          type: string
          description: Name of the namespace
        CreatedAt:
          type: string
          format: date-time
          description: When the cargo was created
        InstanceTotal:
          type: integer
          description: Number of instances
          minimum: 0
        InstanceRunning:
          type: integer
          description: Number of running instances
          minimum: 0
        Status:
          $ref: '#/components/schemas/ObjPsStatus'
          description: Status of the cargo
        Spec:
          $ref: '#/components/schemas/CargoSpec'
          description: Specification of the cargo
        Instances:
          type: array
          items:
            $ref: '#/components/schemas/Process'
          description: List of instances
    CargoKillOptions:
      type: object
      description: Options for the kill command
      required:
      - signal
      properties:
        signal:
          type: string
          description: 'Signal to send to the container default: SIGKILL'
    CargoSpec:
      type: object
      description: |-
        A cargo spec is the specification of a cargo
        It used to know the state of the cargo
        It keep tracking of an history when you patch an existing cargo
      required:
      - Key
      - CargoKey
      - Version
      - CreatedAt
      - Name
      - Container
      properties:
        Key:
          type: string
          format: uuid
          description: Unique identifier of the cargo spec
        CargoKey:
          type: string
          description: The key of the cargo
        Version:
          type: string
          description: Version of the spec
        CreatedAt:
          type: string
          format: date-time
          description: Creation date of the cargo spec
        Name:
          type: string
          description: Name of the cargo
        Metadata:
          type: object
          description: Metadata of the cargo (user defined)
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
        InitContainer:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/Config'
            description: Action to run before the container
        Secrets:
          type:
          - array
          - 'null'
          items:
            type: string
          description: List of secrets to use as environment variables
        ImagePullSecret:
          type:
          - string
          - 'null'
          description: Secret to use when pulling the image
        ImagePullPolicy:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/ImagePullPolicy'
            description: Image pull policy of the cargo
        Container:
          $ref: '#/components/schemas/Config'
          description: Container specification of the cargo
        Replication:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/ReplicationMode'
            description: Replication specification of the cargo
    CargoSpecPartial:
      type: object
      description: A cargo spec partial is used to create a Cargo
      required:
      - Name
      - Container
      properties:
        Name:
          type: string
          description: Name of the cargo
        Metadata:
          type: object
          description: Metadata of the cargo (user defined)
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
        InitContainer:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/Config'
            description: Action to run before the container
        Secrets:
          type:
          - array
          - 'null'
          items:
            type: string
          description: List of secrets to use as environment variables
        ImagePullSecret:
          type:
          - string
          - 'null'
          description: Secret to use when pulling the image
        ImagePullPolicy:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/ImagePullPolicy'
            description: Image pull policy of the cargo
        Container:
          $ref: '#/components/schemas/Config'
          description: Container specification of the cargo
        Replication:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/ReplicationMode'
            description: Replication specification of the cargo
      additionalProperties: false
    CargoSpecUpdate:
      type: object
      description: |-
        Payload used to patch a cargo
        It will create a new [CargoSpec](CargoSpec) with the new values
        It will keep the old values in the history
      properties:
        Name:
          type:
          - string
          - 'null'
          description: New name of the cargo
        Metadata:
          type: object
          description: New metadata of the cargo (user defined)
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
        InitContainer:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/Config'
            description: Action to run before the container
        Secrets:
          type:
          - array
          - 'null'
          items:
            type: string
          description: List of secrets to use as environment variables
        ImagePullSecret:
          type:
          - string
          - 'null'
          description: Secret to use when pulling the image
        ImagePullPolicy:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/ImagePullPolicy'
            description: Image pull policy of the cargo
        Container:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/Config'
            description: New container specification of the cargo
        Replication:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/ReplicationMode'
            description: New replication specification of the cargo
      additionalProperties: false
    CargoSummary:
      type: object
      description: |-
        A CargoSummary is a summary of a cargo
        It's the data structure returned by the list operation
      required:
      - NamespaceName
      - Status
      - CreatedAt
      - InstanceTotal
      - InstanceRunning
      - Spec
      properties:
        NamespaceName:
          type: string
          description: Name of the namespace
        Status:
          $ref: '#/components/schemas/ObjPsStatus'
          description: Status of the cargo
        CreatedAt:
          type: string
          format: date-time
          description: When the cargo was created
        InstanceTotal:
          type: integer
          description: Number of instances
          minimum: 0
        InstanceRunning:
          type: integer
          description: Number of running instances
          minimum: 0
        Spec:
          $ref: '#/components/schemas/CargoSpec'
          description: Specification of the cargo
    ClusterInfo:
      type: object
      description: ClusterInfo represents information about the swarm as is returned by the \"/info\" endpoint. Join-tokens are not included.
      properties:
        ID:
          type:
          - string
          - 'null'
          description: The ID of the swarm.
        Version:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/ObjectVersion'
        CreatedAt:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/String'
            description: Date and time at which the swarm was initialised in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
        UpdatedAt:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/String'
            description: Date and time at which the swarm was last updated in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
        Spec:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/SwarmSpec'
        TLSInfo:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/TlsInfo'
        RootRotationInProgress:
          type:
          - boolean
          - 'null'
          description: Whether there is currently a root CA rotation in progress for the swarm
        DataPathPort:
          type:
          - integer
          - 'null'
          format: int32
          description: DataPathPort specifies the data path port number for data traffic. Acceptable port range is 1024 to 49151. If no port is set or is set to 0, the default port (4789) is used.
          minimum: 0
        DefaultAddrPool:
          type:
          - array
          - 'null'
          items:
            type: string
          description: Default Address Pool specifies default subnet pools for global scope networks.
        SubnetSize:
          type:
          - integer
          - 'null'
          format: int32
          description: SubnetSize specifies the subnet size of the networks created from the default subnet pool.
          minimum: 0
    Commit:
      type: object
      description: Commit holds the Git-commit (SHA1) that a binary was built from, as reported in the version-string of external tools, such as `containerd`, or `runC`.
      properties:
        ID:
          type:
          - string
          - 'null'
          description: Actual commit ID of external tool.
        Expected:
          type:
          - string
          - 'null'
          description: Commit ID of external tool expected by dockerd as set at build time.
    Config:
      type: object
      description: Container to create.
      properties:
        Hostname:
          type:
          - string
          - 'null'
          description: The hostname to use for the container, as a valid RFC 1123 hostname.
        Domainname:
          type:
          - string
          - 'null'
          description: The domain name to use for the container.
        User:
          type:
          - string
          - 'null'
          description: The user that commands are run as inside the container.
        AttachStdin:
          type:
          - boolean
          - 'null'
          description: Whether to attach to `stdin`.
        AttachStdout:
          type:
          - boolean
          - 'null'
          description: Whether to attach to `stdout`.
        AttachStderr:
          type:
          - boolean
          - 'null'
          description: Whether to attach to `stderr`.
        ExposedPorts:
          type:
          - object
          - 'null'
          description: 'An object mapping ports to an empty object in the form:  `{\"<port>/<tcp|udp|sctp>\": {}}`'
          additionalProperties:
            type: object
            additionalProperties:
              default: null
            propertyNames:
              default: null
          propertyNames:
            type: string
        Tty:
          type:
          - boolean
          - 'null'
          description: Attach standard streams to a TTY, including `stdin` if it is not closed.
        OpenStdin:
          type:
          - boolean
          - 'null'
          description: Open `stdin`
        StdinOnce:
          type:
          - boolean
          - 'null'
          description: Close `stdin` after one attached client disconnects
        Env:
          type:
          - array
          - 'null'
          items:
            type: string
          description: A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value.
        Cmd:
          type:
          - array
          - 'null'
          items:
            type: string
          description: Command to run specified as a string or an array of strings.
        Healthcheck:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/HealthConfig'
            description: A TEST to perform TO Check that the container is healthy.
        ArgsEscaped:
          type:
          - boolean
          - 'null'
          description: Command is already escaped (Windows only)
        Image:
          type:
          - string
          - 'null'
          description: The name of the image to use when creating the container
        Volumes:
          type:
          - object
          - 'null'
          description: An object mapping mount point paths inside the container to empty objects.
          additionalProperties:
            type: object
            additionalProperties:
              default: null
            propertyNames:
              default: null
          propertyNames:
            type: string
        WorkingDir:
          type:
          - string
          - 'null'
          description: The working directory for commands to run in.
        Entrypoint:
          type:
          - array
          - 'null'
          items:
            type: string
          description: The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[\"\"]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).
        NetworkDisabled:
          type:
          - boolean
          - 'null'
          description: Disable networking for the container.
        MacAddress:
          type:
          - string
          - 'null'
          description: MAC address of the container.
        OnBuild:
          type:
          - array
          - 'null'
          items:
            type: string
          description: '`ONBUILD` metadata that were defined in the image''s `Dockerfile`.'
        Labels:
          type:
          - object
          - 'null'
          description: User-defined key/value metadata.
          additionalProperties:
            type: string
          propertyNames:
            type: string
        StopSignal:
          type:
          - string
          - 'null'
          description: Signal to stop a container as a string or unsigned integer.
        StopTimeout:
          type:
          - integer
          - 'null'
          format: int64
          description: Timeout to stop a container in seconds.
        Shell:
          type:
          - array
          - 'null'
          items:
            type: string
          description: Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.
        HostConfig:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/HostConfig'
            description: |-
              Container configuration that depends on the host we are running on.
              Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.
        NetworkingConfig:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/NetworkingConfig_String'
            description: This container's networking configuration.
    ContainerConfig:
      type: object
      description: Configuration for a container that is portable between hosts.  When used as `ContainerConfig` field in an image, `ContainerConfig` is an optional field containing the configuration of the container that was last committed when creating the image.  Previous versions of Docker builder used this field to store build cache, and it is not in active use anymore.
      properties:
        Hostname:
          type:
          - string
          - 'null'
          description: The hostname to use for the container, as a valid RFC 1123 hostname.
        Domainname:
          type:
          - string
          - 'null'
          description: The domain name to use for the container.
        User:
          type:
          - string
          - 'null'
          description: The user that commands are run as inside the container.
        AttachStdin:
          type:
          - boolean
          - 'null'
          description: Whether to attach to `stdin`.
        AttachStdout:
          type:
          - boolean
          - 'null'
          description: Whether to attach to `stdout`.
        AttachStderr:
          type:
          - boolean
          - 'null'
          description: Whether to attach to `stderr`.
        ExposedPorts:
          type:
          - object
          - 'null'
          description: 'An object mapping ports to an empty object in the form:  `{\"<port>/<tcp|udp|sctp>\": {}}`'
          additionalProperties:
            type: object
            additionalProperties:
              default: null
            propertyNames:
              default: null
          propertyNames:
            type: string
        Tty:
          type:
          - boolean
          - 'null'
          description: Attach standard streams to a TTY, including `stdin` if it is not closed.
        OpenStdin:
          type:
          - boolean
          - 'null'
          description: Open `stdin`
        StdinOnce:
          type:
          - boolean
          - 'null'
          description: Close `stdin` after one attached client disconnects
        Env:
          type:
          - array
          - 'null'
          items:
            type: string
          description: A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value.
        Cmd:
          type:
          - array
          - 'null'
          items:
            type: string
          description: Command to run specified as a string or an array of strings.
        Healthcheck:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/HealthConfig'
        ArgsEscaped:
          type:
          - boolean
          - 'null'
          description: Command is already escaped (Windows only)
        Image:
          type:
          - string
          - 'null'
          description: The name (or reference) of the image to use when creating the container, or which was used when the container was created.
        Volumes:
          type:
          - object
          - 'null'
          description: An object mapping mount point paths inside the container to empty objects.
          additionalProperties:
            type: object
            additionalProperties:
              default: null
            propertyNames:
              default: null
          propertyNames:
            type: string
        WorkingDir:
          type:
          - string
          - 'null'
          description: The working directory for commands to run in.
        Entrypoint:
          type:
          - array
          - 'null'
          items:
            type: string
          description: The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[\"\"]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).
        NetworkDisabled:
          type:
          - boolean
          - 'null'
          description: Disable networking for the container.
        MacAddress:
          type:
          - string
          - 'null'
          description: 'MAC address of the container.  Deprecated: this field is deprecated in API v1.44 and up. Use EndpointSettings.MacAddress instead.'
        OnBuild:
          type:
          - array
          - 'null'
          items:
            type: string
          description: '`ONBUILD` metadata that were defined in the image''s `Dockerfile`.'
        Labels:
          type:
          - object
          - 'null'
          description: User-defined key/value metadata.
          additionalProperties:
            type: string
          propertyNames:
            type: string
        StopSignal:
          type:
          - string
          - 'null'
          description: Signal to stop a container as a string or unsigned integer.
        StopTimeout:
          type:
          - integer
          - 'null'
          format: int64
          description: Timeout to stop a container in seconds.
        Shell:
          type:
          - array
          - 'null'
          items:
            type: string
          description: Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.
    ContainerInspectResponse:
      type: object
      properties:
        Id:
          type:
          - string
          - 'null'
          description: The ID of the container
        Created:
          type:
          - string
          - 'null'
          description: The time the container was created
        Path:
          type:
          - string
          - 'null'
          description: The path to the command being run
        Args:
          type:
          - array
          - 'null'
          items:
            type: string
          description: The arguments to the command being run
        State:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/ContainerState'
        Image:
          type:
          - string
          - 'null'
          description: The container's image ID
        ResolvConfPath:
          type:
          - string
          - 'null'
        HostnamePath:
          type:
          - string
          - 'null'
        HostsPath:
          type:
          - string
          - 'null'
        LogPath:
          type:
          - string
          - 'null'
        Name:
          type:
          - string
          - 'null'
        RestartCount:
          type:
          - integer
          - 'null'
          format: int64
        Driver:
          type:
          - string
          - 'null'
        Platform:
          type:
          - string
          - 'null'
        MountLabel:
          type:
          - string
          - 'null'
        ProcessLabel:
          type:
          - string
          - 'null'
        AppArmorProfile:
          type:
          - string
          - 'null'
        ExecIDs:
          type:
          - array
          - 'null'
          items:
            type: string
          description: IDs of exec instances that are running in the container.
        HostConfig:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/HostConfig'
        GraphDriver:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/GraphDriverData'
        SizeRw:
          type:
          - integer
          - 'null'
          format: int64
          description: The size of files that have been created or changed by this container.
        SizeRootFs:
          type:
          - integer
          - 'null'
          format: int64
          description: The total size of all the files in this container.
        Mounts:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/MountPoint'
        Config:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/ContainerConfig'
        NetworkSettings:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/NetworkSettings'
    ContainerState:
      type: object
      description: ContainerState stores container's running state. It's part of ContainerJSONBase and will be returned by the \"inspect\" command.
      properties:
        Status:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/ContainerStateStatusEnum'
            description: String representation of the container state. Can be one of \"created\", \"running\", \"paused\", \"restarting\", \"removing\", \"exited\", or \"dead\".
        Running:
          type:
          - boolean
          - 'null'
          description: 'Whether this container is running.  Note that a running container can be _paused_. The `Running` and `Paused` booleans are not mutually exclusive:  When pausing a container (on Linux), the freezer cgroup is used to suspend all processes in the container. Freezing the process requires the process to be running. As a result, paused containers are both `Running` _and_ `Paused`.  Use the `Status` field instead to determine if a container''s state is \"running\".'
        Paused:
          type:
          - boolean
          - 'null'
          description: Whether this container is paused.
        Restarting:
          type:
          - boolean
          - 'null'
          description: Whether this container is restarting.
        OOMKilled:
          type:
          - boolean
          - 'null'
          description: Whether a process within this container has been killed because it ran out of memory since the container was last started.
        Dead:
          type:
          - boolean
          - 'null'
        Pid:
          type:
          - integer
          - 'null'
          format: int64
          description: The process ID of this container
        ExitCode:
          type:
          - integer
          - 'null'
          format: int64
          description: The last exit code of this container
        Error:
          type:
          - string
          - 'null'
        StartedAt:
          type:
          - string
          - 'null'
          description: The time when this container was last started.
        FinishedAt:
          type:
          - string
          - 'null'
          description: The time when this container last exited.
        Health:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/Health'
    ContainerStateStatusEnum:
      type: string
      enum:
      - EMPTY
      - created
      - running
      - paused
      - restarting
      - removing
      - exited
      - dead
    CreateExecOptions:
      type: object
      description: Exec configuration used in the [Create Exec API](Docker::create_exec())
      properties:
        AttachStdin:
          type:
          - boolean
          - 'null'
          description: Attach to `stdin` of the exec command.
        AttachStdout:
          type:
          - boolean
          - 'null'
          description: Attach to stdout of the exec command.
        AttachStderr:
          type:
          - boolean
          - 'null'
          description: Attach to stderr of the exec command.
        Tty:
          type:
          - boolean
          - 'null'
          description: Allocate a pseudo-TTY.
        DetachKeys:
          type:
          - string
          - 'null'
          description: |-
            Override the key sequence for detaching a container. Format is a single character `[a-Z]`
            or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.
        Env:
          type:
          - array
          - 'null'
          items:
            type: string
          description: A list of environment variables in the form `["VAR=value", ...].`
        Cmd:
          type:
          - array
          - 'null'
          items:
            type: string
          description: Command to run, as a string or array of strings.
        Privileged:
          type:
          - boolean
          - 'null'
          description: Runs the exec process with extended privileges.
        User:
          type:
          - string
          - 'null'
          description: |-
            The user, and optionally, group to run the exec process inside the container. Format is one
            of: `user`, `user:group`, `uid`, or `uid:gid`.
        WorkingDir:
          type:
          - string
          - 'null'
          description: The working directory for the exec process inside the container.
    DaemonConfig:
      type: object
      description: |-
        Configuration of the daemon
        It is used to configure the daemon
      required:
      - hosts
      - state_dir
      - gateway
      - hostname
      - nodes
      - advertise_addr
      - conf_dir
      - gid
      properties:
        hosts:
          type: array
          items:
            type: string
          description: List of hosts to listen on
        state_dir:
          type: string
          description: Path to the state directory
        docker_host:
          type: string
          description: Docker host to use
        store_addr:
          type:
          - string
          - 'null'
          description: Store address to connect to
        gateway:
          type: string
          description: Host gateway automatically detected to host default gateway if not set
        hostname:
          type: string
          description: Hostname to use for the node automatically detected if not set
        nodes:
          type: array
          items:
            type: string
          description: List of nodes to join
        advertise_addr:
          type: string
          description: Address to advertise to other nodes
        conf_dir:
          type: string
          description: Config directory
        gid:
          type: integer
          format: int32
          description: Group id
          minimum: 0
        ssl:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/SslConfig'
            description: Optional ssl configuration
    DeviceMapping:
      type: object
      description: A device mapping between the host and container
      properties:
        PathOnHost:
          type:
          - string
          - 'null'
        PathInContainer:
          type:
          - string
          - 'null'
        CgroupPermissions:
          type:
          - string
          - 'null'
    DeviceRequest:
      type: object
      description: A request for devices to be sent to device drivers
      properties:
        Driver:
          type:
          - string
          - 'null'
        Count:
          type:
          - integer
          - 'null'
          format: int64
        DeviceIDs:
          type:
          - array
          - 'null'
          items:
            type: string
        Capabilities:
          type:
          - array
          - 'null'
          items:
            type: array
            items:
              type: string
          description: A list of capabilities; an OR list of AND lists of capabilities.
        Options:
          type:
          - object
          - 'null'
          description: Driver-specific options, specified as a key/value pairs. These options are passed directly to the driver.
          additionalProperties:
            type: string
          propertyNames:
            type: string
    EndpointIpamConfig:
      type: object
      description: EndpointIPAMConfig represents an endpoint's IPAM configuration.
      properties:
        IPv4Address:
          type:
          - string
          - 'null'
        IPv6Address:
          type:
          - string
          - 'null'
        LinkLocalIPs:
          type:
          - array
          - 'null'
          items:
            type: string
    EndpointSettings:
      type: object
      description: Configuration for a network endpoint.
      properties:
        IPAMConfig:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/EndpointIpamConfig'
        Links:
          type:
          - array
          - 'null'
          items:
            type: string
        MacAddress:
          type:
          - string
          - 'null'
          description: MAC address for the endpoint on this network. The network driver might ignore this parameter.
        Aliases:
          type:
          - array
          - 'null'
          items:
            type: string
        NetworkID:
          type:
          - string
          - 'null'
          description: Unique ID of the network.
        EndpointID:
          type:
          - string
          - 'null'
          description: Unique ID for the service endpoint in a Sandbox.
        Gateway:
          type:
          - string
          - 'null'
          description: Gateway address for this network.
        IPAddress:
          type:
          - string
          - 'null'
          description: IPv4 address.
        IPPrefixLen:
          type:
          - integer
          - 'null'
          format: int64
          description: Mask length of the IPv4 address.
        IPv6Gateway:
          type:
          - string
          - 'null'
          description: IPv6 gateway address.
        GlobalIPv6Address:
          type:
          - string
          - 'null'
          description: Global IPv6 address.
        GlobalIPv6PrefixLen:
          type:
          - integer
          - 'null'
          format: int64
          description: Mask length of the global IPv6 address.
        DriverOpts:
          type:
          - object
          - 'null'
          description: DriverOpts is a mapping of driver options and values. These options are passed directly to the driver and are driver specific.
          additionalProperties:
            type: string
          propertyNames:
            type: string
        DNSNames:
          type:
          - array
          - 'null'
          items:
            type: string
          description: List of all DNS names an endpoint has on a specific network. This list is based on the container name, network aliases, container short ID, and hostname.  These DNS names are non-fully qualified but can contain several dots. You can get fully qualified DNS names by appending `.<network-name>`. For instance, if container name is `my.ctr` and the network is named `testnet`, `DNSNames` will contain `my.ctr` and the FQDN will be `my.ctr.testnet`.
    Event:
      type: object
      description: Event is a generic event type that is used to notify state changes
      required:
      - Key
      - CreatedAt
      - ExpiresAt
      - ReportingNode
      - ReportingController
      - Kind
      - Action
      - Reason
      properties:
        Key:
          type: string
          format: uuid
          description: Unique identifier of this event.
        CreatedAt:
          type: string
          format: date-time
          description: When the event was created.
        ExpiresAt:
          type: string
          format: date-time
          description: When the event expires.
        ReportingNode:
          type: string
          description: Reporting Node is the name of the node where the Event was generated.
        ReportingController:
          type: string
          description: |-
            Reporting Controller is the name of the controller that emitted this Event.
            e.g. `nanocl.io/core`. This field cannot be empty for new Events.
        Kind:
          $ref: '#/components/schemas/EventKind'
          description: |-
            Kind of this event (Error, Normal, Warning), new types could be added in the future.
            It is machine-readable. This field cannot be empty for new Events.
        Action:
          type: string
          description: |-
            Action is what action was taken/failed regarding to the regarding actor.
            It is machine-readable.
            This field cannot be empty for new Events and it can have at most 128 characters.
        Reason:
          type: string
          description: |-
            Reason is why the action was taken. It is human-readable.
            This field cannot be empty for new Events and it can have at most 128 characters.
        Note:
          type:
          - string
          - 'null'
          description: Human-readable description of the status of this operation
        Actor:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/EventActor'
            description: Actor contains the object this Event is about.
        Related:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/EventActor'
            description: |-
              Optional secondary actor for more complex actions.
              E.g. when regarding actor triggers a creation or deletion of related actor.
        Metadata:
          type: object
          description: Standard metadata.
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
    EventActor:
      type: object
      description: Actor is the actor that triggered the event
      required:
      - Kind
      properties:
        Key:
          type:
          - string
          - 'null'
        Kind:
          $ref: '#/components/schemas/EventActorKind'
        Attributes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
    EventActorKind:
      type: string
      description: Kind is the type of event related to the actor kind
      enum:
      - Namespace
      - Cargo
      - Vm
      - Job
      - Resource
      - Secret
      - Process
      - ContainerImage
    EventCondition:
      type: object
      description: Condition to stop watching for events if their are meet
      required:
      - Kind
      - Action
      properties:
        ActorKey:
          type:
          - string
          - 'null'
        ActorKind:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/EventActorKind'
        RelatedKey:
          type:
          - string
          - 'null'
        RelatedKind:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/EventActorKind'
        Kind:
          type: array
          items:
            $ref: '#/components/schemas/EventKind'
        Action:
          type: array
          items:
            $ref: '#/components/schemas/NativeEventAction'
    EventKind:
      type: string
      description: Kind of event (Error, Normal, Warning), new types could be added in the future.
      enum:
      - error
      - normal
      - warning
    ExecInspectResponse:
      type: object
      properties:
        CanRemove:
          type:
          - boolean
          - 'null'
        DetachKeys:
          type:
          - string
          - 'null'
        ID:
          type:
          - string
          - 'null'
        Running:
          type:
          - boolean
          - 'null'
        ExitCode:
          type:
          - integer
          - 'null'
          format: int64
        ProcessConfig:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/ProcessConfig'
        OpenStdin:
          type:
          - boolean
          - 'null'
        OpenStderr:
          type:
          - boolean
          - 'null'
        OpenStdout:
          type:
          - boolean
          - 'null'
        ContainerID:
          type:
          - string
          - 'null'
        Pid:
          type:
          - integer
          - 'null'
          format: int64
          description: The system process ID for the exec process.
    GenericCount:
      type: object
      description: Generic count response
      required:
      - Count
      properties:
        Count:
          type: integer
          format: int64
          description: Number of items
    GenericResourcesInner:
      type: object
      properties:
        NamedResourceSpec:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/GenericResourcesInnerNamedResourceSpec'
        DiscreteResourceSpec:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/GenericResourcesInnerDiscreteResourceSpec'
    GenericResourcesInnerDiscreteResourceSpec:
      type: object
      properties:
        Kind:
          type:
          - string
          - 'null'
        Value:
          type:
          - integer
          - 'null'
          format: int64
    GenericResourcesInnerNamedResourceSpec:
      type: object
      properties:
        Kind:
          type:
          - string
          - 'null'
        Value:
          type:
          - string
          - 'null'
    GraphDriverData:
      type: object
      description: Information about the storage driver used to store the container's and image's filesystem.
      required:
      - Name
      - Data
      properties:
        Name:
          type: string
          description: Name of the storage driver.
        Data:
          type: object
          description: Low-level storage metadata, provided as key/value pairs.  This information is driver-specific, and depends on the storage-driver in use, and should be used for informational purposes only.
          additionalProperties:
            type: string
          propertyNames:
            type: string
    HashMap:
      type: object
      additionalProperties:
        oneOf:
        - type: 'null'
        - type: array
          items:
            type: object
            description: PortBinding represents a binding between a host IP address and a host port.
            properties:
              HostIp:
                type:
                - string
                - 'null'
                description: Host IP address that the container's port is mapped to.
              HostPort:
                type:
                - string
                - 'null'
                description: Host port number that the container's port is mapped to.
      propertyNames:
        type: string
    Health:
      type: object
      description: Health stores information about the container's healthcheck results.
      properties:
        Status:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/HealthStatusEnum'
            description: Status is one of `none`, `starting`, `healthy` or `unhealthy`  - \"none\"      Indicates there is no healthcheck - \"starting\"  Starting indicates that the container is not yet ready - \"healthy\"   Healthy indicates that the container is running correctly - \"unhealthy\" Unhealthy indicates that the container has a problem
        FailingStreak:
          type:
          - integer
          - 'null'
          format: int64
          description: FailingStreak is the number of consecutive failures
        Log:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/HealthcheckResult'
          description: Log contains the last few results (oldest first)
    HealthConfig:
      type: object
      description: A test to perform to check that the container is healthy.
      properties:
        Test:
          type:
          - array
          - 'null'
          items:
            type: string
          description: 'The test to perform. Possible values are:  - `[]` inherit healthcheck from image or parent image - `[\"NONE\"]` disable healthcheck - `[\"CMD\", args...]` exec arguments directly - `[\"CMD-SHELL\", command]` run command with system''s default shell'
        Interval:
          type:
          - integer
          - 'null'
          format: int64
          description: The time to wait between checks in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.
        Timeout:
          type:
          - integer
          - 'null'
          format: int64
          description: The time to wait before considering the check to have hung. It should be 0 or at least 1000000 (1 ms). 0 means inherit.
        Retries:
          type:
          - integer
          - 'null'
          format: int64
          description: The number of consecutive failures needed to consider a container as unhealthy. 0 means inherit.
        StartPeriod:
          type:
          - integer
          - 'null'
          format: int64
          description: Start period for the container to initialize before starting health-retries countdown in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.
        StartInterval:
          type:
          - integer
          - 'null'
          format: int64
          description: The time to wait between checks in nanoseconds during the start period. It should be 0 or at least 1000000 (1 ms). 0 means inherit.
    HealthStatusEnum:
      type: string
      enum:
      - EMPTY
      - none
      - starting
      - healthy
      - unhealthy
    HealthcheckResult:
      type: object
      description: HealthcheckResult stores information about a single run of a healthcheck probe
      properties:
        Start:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/String'
            description: Date and time at which this check started in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
        End:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/String'
            description: Date and time at which this check ended in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
        ExitCode:
          type:
          - integer
          - 'null'
          format: int64
          description: 'ExitCode meanings:  - `0` healthy - `1` unhealthy - `2` reserved (considered unhealthy) - other values: error running probe'
        Output:
          type:
          - string
          - 'null'
          description: Output from last check
    HostConfig:
      type: object
      description: Container configuration that depends on the host we are running on
      properties:
        CpuShares:
          type:
          - integer
          - 'null'
          format: int64
          description: An integer value representing this container's relative CPU weight versus other containers.
        Memory:
          type:
          - integer
          - 'null'
          format: int64
          description: Memory limit in bytes.
        CgroupParent:
          type:
          - string
          - 'null'
          description: Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.
        BlkioWeight:
          type:
          - integer
          - 'null'
          format: int32
          description: Block IO weight (relative weight).
          minimum: 0
        BlkioWeightDevice:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/ResourcesBlkioWeightDevice'
          description: 'Block IO weight (relative device weight) in the form:  ``` [{\"Path\": \"device_path\", \"Weight\": weight}] ```'
        BlkioDeviceReadBps:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/ThrottleDevice'
          description: 'Limit read rate (bytes per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```'
        BlkioDeviceWriteBps:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/ThrottleDevice'
          description: 'Limit write rate (bytes per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```'
        BlkioDeviceReadIOps:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/ThrottleDevice'
          description: 'Limit read rate (IO per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```'
        BlkioDeviceWriteIOps:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/ThrottleDevice'
          description: 'Limit write rate (IO per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```'
        CpuPeriod:
          type:
          - integer
          - 'null'
          format: int64
          description: The length of a CPU period in microseconds.
        CpuQuota:
          type:
          - integer
          - 'null'
          format: int64
          description: Microseconds of CPU time that the container can get in a CPU period.
        CpuRealtimePeriod:
          type:
          - integer
          - 'null'
          format: int64
          description: The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
        CpuRealtimeRuntime:
          type:
          - integer
          - 'null'
          format: int64
          description: The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
        CpusetCpus:
          type:
          - string
          - 'null'
          description: CPUs in which to allow execution (e.g., `0-3`, `0,1`).
        CpusetMems:
          type:
          - string
          - 'null'
          description: Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.
        Devices:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/DeviceMapping'
          description: A list of devices to add to the container.
        DeviceCgroupRules:
          type:
          - array
          - 'null'
          items:
            type: string
          description: a list of cgroup rules to apply to the container
        DeviceRequests:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/DeviceRequest'
          description: A list of requests for devices to be sent to device drivers.
        KernelMemoryTCP:
          type:
          - integer
          - 'null'
          format: int64
          description: Hard limit for kernel TCP buffer memory (in bytes). Depending on the OCI runtime in use, this option may be ignored. It is no longer supported by the default (runc) runtime.  This field is omitted when empty.
        MemoryReservation:
          type:
          - integer
          - 'null'
          format: int64
          description: Memory soft limit in bytes.
        MemorySwap:
          type:
          - integer
          - 'null'
          format: int64
          description: Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.
        MemorySwappiness:
          type:
          - integer
          - 'null'
          format: int64
          description: Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.
        NanoCpus:
          type:
          - integer
          - 'null'
          format: int64
          description: CPU quota in units of 10<sup>-9</sup> CPUs.
        OomKillDisable:
          type:
          - boolean
          - 'null'
          description: Disable OOM Killer for the container.
        Init:
          type:
          - boolean
          - 'null'
          description: Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.
        PidsLimit:
          type:
          - integer
          - 'null'
          format: int64
          description: Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null` to not change.
        Ulimits:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/ResourcesUlimits'
          description: 'A list of resource limits to set in the container. For example:  ``` {\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048} ```'
        CpuCount:
          type:
          - integer
          - 'null'
          format: int64
          description: The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
        CpuPercent:
          type:
          - integer
          - 'null'
          format: int64
          description: The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
        IOMaximumIOps:
          type:
          - integer
          - 'null'
          format: int64
          description: Maximum IOps for the container system drive (Windows only)
        IOMaximumBandwidth:
          type:
          - integer
          - 'null'
          format: int64
          description: Maximum IO in bytes per second for the container system drive (Windows only).
        Binds:
          type:
          - array
          - 'null'
          items:
            type: string
          description: 'A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - `host-src:container-dest[:options]` to bind-mount a host path   into the container. Both `host-src`, and `container-dest` must   be an _absolute_ path. - `volume-name:container-dest[:options]` to bind-mount a volume   managed by a volume driver into the container. `container-dest`   must be an _absolute_ path.  `options` is an optional, comma-delimited list of:  - `nocopy` disables automatic copying of data from the container   path to the volume. The `nocopy` flag only applies to named volumes. - `[ro|rw]` mounts a volume read-only or read-write, respectively.   If omitted or set to `rw`, volumes are mounted read-write. - `[z|Z]` applies SELinux labels to allow or deny multiple containers   to read and write to the same volume.     - `z`: a _shared_ content label is applied to the content. This       label indicates that multiple containers can share the volume       content, for both reading and writing.     - `Z`: a _private unshared_ label is applied to the content.       This label indicates that only the current container can use       a private volume. Labeling systems such as SELinux require       proper labels to be placed on volume content that is mounted       into a container. Without a label, the security system can       prevent a container''s processes from using the content. By       default, the labels set by the host operating system are not       modified. - `[[r]shared|[r]slave|[r]private]` specifies mount   [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).   This only applies to bind-mounted volumes, not internal volumes   or named volumes. Mount propagation requires the source mount   point (the location where the source directory is mounted in the   host operating system) to have the correct propagation properties.   For shared volumes, the source mount point must be set to `shared`.   For slave volumes, the mount must be set to either `shared` or   `slave`.'
        ContainerIDFile:
          type:
          - string
          - 'null'
          description: Path to a file where the container ID is written
        LogConfig:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/HostConfigLogConfig'
        NetworkMode:
          type:
          - string
          - 'null'
          description: 'Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network''s name to which this container should connect to.'
        PortBindings:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/HashMap'
        RestartPolicy:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/RestartPolicy'
        AutoRemove:
          type:
          - boolean
          - 'null'
          description: Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set.
        VolumeDriver:
          type:
          - string
          - 'null'
          description: Driver that this container uses to mount volumes.
        VolumesFrom:
          type:
          - array
          - 'null'
          items:
            type: string
          description: A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`.
        Mounts:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/Mount'
          description: Specification for mounts to be added to the container.
        ConsoleSize:
          type:
          - array
          - 'null'
          items:
            type: integer
            format: int32
          description: Initial console size, as an `[height, width]` array.
        Annotations:
          type:
          - object
          - 'null'
          description: Arbitrary non-identifying metadata attached to container and provided to the runtime when the container is started.
          additionalProperties:
            type: string
          propertyNames:
            type: string
        CapAdd:
          type:
          - array
          - 'null'
          items:
            type: string
          description: A list of kernel capabilities to add to the container. Conflicts with option 'Capabilities'.
        CapDrop:
          type:
          - array
          - 'null'
          items:
            type: string
          description: A list of kernel capabilities to drop from the container. Conflicts with option 'Capabilities'.
        CgroupnsMode:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/HostConfigCgroupnsModeEnum'
            description: 'cgroup namespace mode for the container. Possible values are:  - `\"private\"`: the container runs in its own private cgroup namespace - `\"host\"`: use the host system''s cgroup namespace  If not specified, the daemon default is used, which can either be `\"private\"` or `\"host\"`, depending on daemon version, kernel support and configuration.'
        Dns:
          type:
          - array
          - 'null'
          items:
            type: string
          description: A list of DNS servers for the container to use.
        DnsOptions:
          type:
          - array
          - 'null'
          items:
            type: string
          description: A list of DNS options.
        DnsSearch:
          type:
          - array
          - 'null'
          items:
            type: string
          description: A list of DNS search domains.
        ExtraHosts:
          type:
          - array
          - 'null'
          items:
            type: string
          description: A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`.
        GroupAdd:
          type:
          - array
          - 'null'
          items:
            type: string
          description: A list of additional groups that the container process will run as.
        IpcMode:
          type:
          - string
          - 'null'
          description: 'IPC sharing mode for the container. Possible values are:  - `\"none\"`: own private IPC namespace, with /dev/shm not mounted - `\"private\"`: own private IPC namespace - `\"shareable\"`: own private IPC namespace, with a possibility to share it with other containers - `\"container:<name|id>\"`: join another (shareable) container''s IPC namespace - `\"host\"`: use the host system''s IPC namespace  If not specified, daemon default is used, which can either be `\"private\"` or `\"shareable\"`, depending on daemon version and configuration.'
        Cgroup:
          type:
          - string
          - 'null'
          description: Cgroup to use for the container.
        Links:
          type:
          - array
          - 'null'
          items:
            type: string
          description: A list of links for the container in the form `container_name:alias`.
        OomScoreAdj:
          type:
          - integer
          - 'null'
          format: int64
          description: An integer value containing the score given to the container in order to tune OOM killer preferences.
        PidMode:
          type:
          - string
          - 'null'
          description: 'Set the PID (Process) Namespace mode for the container. It can be either:  - `\"container:<name|id>\"`: joins another container''s PID namespace - `\"host\"`: use the host''s PID namespace inside the container'
        Privileged:
          type:
          - boolean
          - 'null'
          description: Gives the container full access to the host.
        PublishAllPorts:
          type:
          - boolean
          - 'null'
          description: Allocates an ephemeral host port for all of a container's exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by `/proc/sys/net/ipv4/ip_local_port_range`.
        ReadonlyRootfs:
          type:
          - boolean
          - 'null'
          description: Mount the container's root filesystem as read only.
        SecurityOpt:
          type:
          - array
          - 'null'
          items:
            type: string
          description: A list of string values to customize labels for MLS systems, such as SELinux.
        StorageOpt:
          type:
          - object
          - 'null'
          description: 'Storage driver options for this container, in the form `{\"size\": \"120G\"}`.'
          additionalProperties:
            type: string
          propertyNames:
            type: string
        Tmpfs:
          type:
          - object
          - 'null'
          description: 'A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example:  ``` { \"/run\": \"rw,noexec,nosuid,size=65536k\" } ```'
          additionalProperties:
            type: string
          propertyNames:
            type: string
        UTSMode:
          type:
          - string
          - 'null'
          description: UTS namespace to use for the container.
        UsernsMode:
          type:
          - string
          - 'null'
          description: Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
        ShmSize:
          type:
          - integer
          - 'null'
          format: int64
          description: Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.
        Sysctls:
          type:
          - object
          - 'null'
          description: 'A list of kernel parameters (sysctls) to set in the container. For example:  ``` {\"net.ipv4.ip_forward\": \"1\"} ```'
          additionalProperties:
            type: string
          propertyNames:
            type: string
        Runtime:
          type:
          - string
          - 'null'
          description: Runtime to use with this container.
        Isolation:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/HostConfigIsolationEnum'
            description: Isolation technology of the container. (Windows only)
        MaskedPaths:
          type:
          - array
          - 'null'
          items:
            type: string
          description: The list of paths to be masked inside the container (this overrides the default set of paths).
        ReadonlyPaths:
          type:
          - array
          - 'null'
          items:
            type: string
          description: The list of paths to be set as read-only inside the container (this overrides the default set of paths).
    HostConfigCgroupnsModeEnum:
      type: string
      enum:
      - EMPTY
      - private
      - host
    HostConfigIsolationEnum:
      type: string
      enum:
      - EMPTY
      - default
      - process
      - hyperv
    HostConfigLogConfig:
      type: object
      description: The logging configuration for this container
      properties:
        Type:
          type:
          - string
          - 'null'
        Config:
          type:
          - object
          - 'null'
          additionalProperties:
            type: string
          propertyNames:
            type: string
    HostInfo:
      allOf:
      - $ref: '#/components/schemas/SystemInfo'
        description: Docker contains information about the docker daemon
      - type: object
        required:
        - HostGateway
        - Network
        - Config
        properties:
          HostGateway:
            type: string
            description: HostGateway is the gateway address of the host
          Network:
            $ref: '#/components/schemas/Network'
            description: Network configuration
          Config:
            $ref: '#/components/schemas/DaemonConfig'
            description: Daemon configuration
      description: HostInfo contains information about the host and the docker daemon
    ImagePullPolicy:
      type: string
      description: Policy for pulling images related to process objects (job, cargo, vm)
      enum:
      - Never
      - Always
      - IfNotPresent
    IndexInfo:
      type: object
      description: IndexInfo contains information about a registry.
      properties:
        Name:
          type:
          - string
          - 'null'
          description: Name of the registry, such as \"docker.io\".
        Mirrors:
          type:
          - array
          - 'null'
          items:
            type: string
          description: List of mirrors, expressed as URIs.
        Secure:
          type:
          - boolean
          - 'null'
          description: 'Indicates if the registry is part of the list of insecure registries.  If `false`, the registry is insecure. Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.  > **Warning**: Insecure registries can be useful when running a local > registry. However, because its use creates security vulnerabilities > it should ONLY be enabled for testing purposes. For increased > security, users should add their CA to their system''s list of > trusted CAs instead of enabling this option.'
        Official:
          type:
          - boolean
          - 'null'
          description: Indicates whether this is an official registry (i.e., Docker Hub / docker.io)
    Ipam:
      type: object
      properties:
        Driver:
          type:
          - string
          - 'null'
          description: Name of the IPAM driver to use.
        Config:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/IpamConfig'
          description: 'List of IPAM configuration options, specified as a map:  ``` {\"Subnet\": <CIDR>, \"IPRange\": <CIDR>, \"Gateway\": <IP address>, \"AuxAddress\": <device_name:IP address>} ```'
        Options:
          type:
          - object
          - 'null'
          description: Driver-specific options, specified as a map.
          additionalProperties:
            type: string
          propertyNames:
            type: string
    IpamConfig:
      type: object
      properties:
        Subnet:
          type:
          - string
          - 'null'
        IPRange:
          type:
          - string
          - 'null'
        Gateway:
          type:
          - string
          - 'null'
        AuxiliaryAddresses:
          type:
          - object
          - 'null'
          additionalProperties:
            type: string
          propertyNames:
            type: string
    Job:
      type: object
      description: A job is a collection of containers to run in sequence as a single unit to act like a command
      required:
      - Name
      - CreatedAt
      - UpdatedAt
      - Status
      - Containers
      properties:
        Name:
          type: string
          description: Name of the job
        CreatedAt:
          type: string
          format: date-time
          description: When the job have been created
        UpdatedAt:
          type: string
          format: date-time
          description: When the job have been updated
        Status:
          $ref: '#/components/schemas/ObjPsStatus'
          description: Status of the job
        Secrets:
          type:
          - array
          - 'null'
          items:
            type: string
          description: Secrets to load as environment variables
        Metadata:
          type: object
          description: Metadata (user defined)
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
        Schedule:
          type:
          - string
          - 'null'
          description: Schedule of the job (cron)
        Ttl:
          type:
          - integer
          - 'null'
          description: Remove the job after (x) seconds after execution
          minimum: 0
        ImagePullSecret:
          type:
          - string
          - 'null'
          description: Secret to use when pulling the image
        ImagePullPolicy:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/ImagePullPolicy'
            description: Image pull policy
        Containers:
          type: array
          items:
            $ref: '#/components/schemas/Config'
          description: Containers to run
    JobInspect:
      type: object
      description: Detailed information about a job
      required:
      - InstanceTotal
      - InstanceSuccess
      - InstanceRunning
      - InstanceFailed
      - Spec
      - Instances
      properties:
        InstanceTotal:
          type: integer
          description: Number of instances
          minimum: 0
        InstanceSuccess:
          type: integer
          description: Number of instance that succeeded
          minimum: 0
        InstanceRunning:
          type: integer
          description: Number of instance running
          minimum: 0
        InstanceFailed:
          type: integer
          description: Number of instance failed
          minimum: 0
        Spec:
          $ref: '#/components/schemas/Job'
          description: Specification of the job
        Instances:
          type: array
          items:
            $ref: '#/components/schemas/Process'
          description: List of instances
    JobPartial:
      type: object
      description: Job partial is used to create a new job
      required:
      - Name
      - Containers
      properties:
        Name:
          type: string
          description: Name of the job
        Secrets:
          type:
          - array
          - 'null'
          items:
            type: string
          description: Secrets to load as environment variables
        Metadata:
          type: object
          description: Metadata (user defined)
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
        Schedule:
          type:
          - string
          - 'null'
          description: Schedule of the job (cron)
        Ttl:
          type:
          - integer
          - 'null'
          description: Remove the job after (x) seconds after execution
          minimum: 0
        ImagePullSecret:
          type:
          - string
          - 'null'
          description: Secret to use when pulling the image
        ImagePullPolicy:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/ImagePullPolicy'
        Containers:
          type: array
          items:
            $ref: '#/components/schemas/Config'
          description: List of container to run
      additionalProperties: false
    JobSummary:
      type: object
      description: Summary of a job (used in list)
      required:
      - InstanceTotal
      - InstanceSuccess
      - InstanceRunning
      - InstanceFailed
      - Spec
      properties:
        InstanceTotal:
          type: integer
          description: Number of instances
          minimum: 0
        InstanceSuccess:
          type: integer
          description: Number of instance that succeeded
          minimum: 0
        InstanceRunning:
          type: integer
          description: Number of instance running
          minimum: 0
        InstanceFailed:
          type: integer
          description: Number of instance failed
          minimum: 0
        Spec:
          $ref: '#/components/schemas/Job'
          description: Specification of the job
    LocalNodeState:
      type: string
      description: |-
        Current local status of this node.
        Enumeration of values.
        Since this enum's variants do not hold data, we can easily define them them as `#[repr(C)]`
        which helps with FFI.
      enum:
      - EMPTY
      - inactive
      - pending
      - active
      - error
      - locked
    MemoryStats:
      type: object
      description: General memory statistics for the container.
      properties:
        stats:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/MemoryStatsStats'
        max_usage:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        usage:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        failcnt:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        limit:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        commit:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        commit_peak:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        commitbytes:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        commitpeakbytes:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        privateworkingset:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
    MemoryStatsStats:
      oneOf:
      - $ref: '#/components/schemas/MemoryStatsStatsV1'
      - $ref: '#/components/schemas/MemoryStatsStatsV2'
      description: Granular memory statistics for the container.
    MemoryStatsStatsV1:
      type: object
      description: |-
        Granular memory statistics for the container, v1 cgroups.

        Exposed in the docker library [here](https://github.com/moby/moby/blob/40d9e2aff130b42ba0f83d5238b9b53184c8ab3b/daemon/daemon_unix.go#L1436).
      required:
      - cache
      - dirty
      - mapped_file
      - total_inactive_file
      - pgpgout
      - rss
      - total_mapped_file
      - writeback
      - unevictable
      - pgpgin
      - total_unevictable
      - pgmajfault
      - total_rss
      - total_rss_huge
      - total_writeback
      - total_inactive_anon
      - rss_huge
      - hierarchical_memory_limit
      - total_pgfault
      - total_active_file
      - active_anon
      - total_active_anon
      - total_pgpgout
      - total_cache
      - total_dirty
      - inactive_anon
      - active_file
      - pgfault
      - inactive_file
      - total_pgmajfault
      - total_pgpgin
      properties:
        cache:
          type: integer
          format: int64
          minimum: 0
        dirty:
          type: integer
          format: int64
          minimum: 0
        mapped_file:
          type: integer
          format: int64
          minimum: 0
        total_inactive_file:
          type: integer
          format: int64
          minimum: 0
        pgpgout:
          type: integer
          format: int64
          minimum: 0
        rss:
          type: integer
          format: int64
          minimum: 0
        total_mapped_file:
          type: integer
          format: int64
          minimum: 0
        writeback:
          type: integer
          format: int64
          minimum: 0
        unevictable:
          type: integer
          format: int64
          minimum: 0
        pgpgin:
          type: integer
          format: int64
          minimum: 0
        total_unevictable:
          type: integer
          format: int64
          minimum: 0
        pgmajfault:
          type: integer
          format: int64
          minimum: 0
        total_rss:
          type: integer
          format: int64
          minimum: 0
        total_rss_huge:
          type: integer
          format: int64
          minimum: 0
        total_writeback:
          type: integer
          format: int64
          minimum: 0
        total_inactive_anon:
          type: integer
          format: int64
          minimum: 0
        rss_huge:
          type: integer
          format: int64
          minimum: 0
        hierarchical_memory_limit:
          type: integer
          format: int64
          minimum: 0
        total_pgfault:
          type: integer
          format: int64
          minimum: 0
        total_active_file:
          type: integer
          format: int64
          minimum: 0
        active_anon:
          type: integer
          format: int64
          minimum: 0
        total_active_anon:
          type: integer
          format: int64
          minimum: 0
        total_pgpgout:
          type: integer
          format: int64
          minimum: 0
        total_cache:
          type: integer
          format: int64
          minimum: 0
        total_dirty:
          type: integer
          format: int64
          minimum: 0
        inactive_anon:
          type: integer
          format: int64
          minimum: 0
        active_file:
          type: integer
          format: int64
          minimum: 0
        pgfault:
          type: integer
          format: int64
          minimum: 0
        inactive_file:
          type: integer
          format: int64
          minimum: 0
        total_pgmajfault:
          type: integer
          format: int64
          minimum: 0
        total_pgpgin:
          type: integer
          format: int64
          minimum: 0
        hierarchical_memsw_limit:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        shmem:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        total_shmem:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
      additionalProperties: false
    MemoryStatsStatsV2:
      type: object
      description: |-
        Granular memory statistics for the container, v2 cgroups.

        Exposed in the docker library [here](https://github.com/moby/moby/blob/40d9e2aff130b42ba0f83d5238b9b53184c8ab3b/daemon/daemon_unix.go#L1542).
      required:
      - anon
      - file
      - kernel_stack
      - slab
      - sock
      - shmem
      - file_mapped
      - file_dirty
      - file_writeback
      - anon_thp
      - inactive_anon
      - active_anon
      - inactive_file
      - active_file
      - unevictable
      - slab_reclaimable
      - slab_unreclaimable
      - pgfault
      - pgmajfault
      - workingset_refault
      - workingset_activate
      - workingset_nodereclaim
      - pgrefill
      - pgscan
      - pgsteal
      - pgactivate
      - pgdeactivate
      - pglazyfree
      - pglazyfreed
      - thp_fault_alloc
      - thp_collapse_alloc
      properties:
        anon:
          type: integer
          format: int64
          minimum: 0
        file:
          type: integer
          format: int64
          minimum: 0
        kernel_stack:
          type: integer
          format: int64
          minimum: 0
        slab:
          type: integer
          format: int64
          minimum: 0
        sock:
          type: integer
          format: int64
          minimum: 0
        shmem:
          type: integer
          format: int64
          minimum: 0
        file_mapped:
          type: integer
          format: int64
          minimum: 0
        file_dirty:
          type: integer
          format: int64
          minimum: 0
        file_writeback:
          type: integer
          format: int64
          minimum: 0
        anon_thp:
          type: integer
          format: int64
          minimum: 0
        inactive_anon:
          type: integer
          format: int64
          minimum: 0
        active_anon:
          type: integer
          format: int64
          minimum: 0
        inactive_file:
          type: integer
          format: int64
          minimum: 0
        active_file:
          type: integer
          format: int64
          minimum: 0
        unevictable:
          type: integer
          format: int64
          minimum: 0
        slab_reclaimable:
          type: integer
          format: int64
          minimum: 0
        slab_unreclaimable:
          type: integer
          format: int64
          minimum: 0
        pgfault:
          type: integer
          format: int64
          minimum: 0
        pgmajfault:
          type: integer
          format: int64
          minimum: 0
        workingset_refault:
          type: integer
          format: int64
          minimum: 0
        workingset_activate:
          type: integer
          format: int64
          minimum: 0
        workingset_nodereclaim:
          type: integer
          format: int64
          minimum: 0
        pgrefill:
          type: integer
          format: int64
          minimum: 0
        pgscan:
          type: integer
          format: int64
          minimum: 0
        pgsteal:
          type: integer
          format: int64
          minimum: 0
        pgactivate:
          type: integer
          format: int64
          minimum: 0
        pgdeactivate:
          type: integer
          format: int64
          minimum: 0
        pglazyfree:
          type: integer
          format: int64
          minimum: 0
        pglazyfreed:
          type: integer
          format: int64
          minimum: 0
        thp_fault_alloc:
          type: integer
          format: int64
          minimum: 0
        thp_collapse_alloc:
          type: integer
          format: int64
          minimum: 0
      additionalProperties: false
    Metric:
      type: object
      description: Metric entry
      required:
      - Key
      - CreatedAt
      - ExpiresAt
      - NodeName
      - Kind
      - Data
      properties:
        Key:
          type: string
          format: uuid
          description: The key of the metric in the database `UUID`
        CreatedAt:
          type: string
          format: date-time
          description: When the metric was created
        ExpiresAt:
          type: string
          format: date-time
          description: When the metric will expire
        NodeName:
          type: string
          description: The node where the metric come from
        Kind:
          type: string
          description: The kind of the metric
        Data:
          description: The data of the metric
        Note:
          type:
          - string
          - 'null'
          description: Optional note about the metric
    MetricPartial:
      type: object
      description: Used to create a new metric
      required:
      - Kind
      - Data
      properties:
        Kind:
          type: string
          description: The kind of the metric
        Data:
          description: The data of the metric
        Note:
          type:
          - string
          - 'null'
          description: Optional note about the metric
    Mount:
      type: object
      properties:
        Target:
          type:
          - string
          - 'null'
          description: Container path.
        Source:
          type:
          - string
          - 'null'
          description: Mount source (e.g. a volume name, a host path).
        Type:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/MountTypeEnum'
            description: 'The mount type. Available types:  - `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container. - `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed. - `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs. - `npipe` Mounts a named pipe from the host into the container. Must exist prior to creating the container. - `cluster` a Swarm cluster volume'
        ReadOnly:
          type:
          - boolean
          - 'null'
          description: Whether the mount should be read-only.
        Consistency:
          type:
          - string
          - 'null'
          description: 'The consistency requirement for the mount: `default`, `consistent`, `cached`, or `delegated`.'
        BindOptions:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/MountBindOptions'
        VolumeOptions:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/MountVolumeOptions'
        TmpfsOptions:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/MountTmpfsOptions'
    MountBindOptions:
      type: object
      description: Optional configuration for the `bind` type.
      properties:
        Propagation:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/MountBindOptionsPropagationEnum'
            description: A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`.
        NonRecursive:
          type:
          - boolean
          - 'null'
          description: Disable recursive bind mount.
        CreateMountpoint:
          type:
          - boolean
          - 'null'
          description: Create mount point on host if missing
        ReadOnlyNonRecursive:
          type:
          - boolean
          - 'null'
          description: Make the mount non-recursively read-only, but still leave the mount recursive (unless NonRecursive is set to `true` in conjunction).  Addded in v1.44, before that version all read-only mounts were non-recursive by default. To match the previous behaviour this will default to `true` for clients on versions prior to v1.44.
        ReadOnlyForceRecursive:
          type:
          - boolean
          - 'null'
          description: Raise an error if the mount cannot be made recursively read-only.
    MountBindOptionsPropagationEnum:
      type: string
      enum:
      - EMPTY
      - private
      - rprivate
      - shared
      - rshared
      - slave
      - rslave
    MountPoint:
      type: object
      description: MountPoint represents a mount point configuration inside the container. This is used for reporting the mountpoints in use by a container.
      properties:
        Type:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/MountPointTypeEnum'
            description: 'The mount type:  - `bind` a mount of a file or directory from the host into the container. - `volume` a docker volume with the given `Name`. - `tmpfs` a `tmpfs`. - `npipe` a named pipe from the host into the container. - `cluster` a Swarm cluster volume'
        Name:
          type:
          - string
          - 'null'
          description: Name is the name reference to the underlying data defined by `Source` e.g., the volume name.
        Source:
          type:
          - string
          - 'null'
          description: Source location of the mount.  For volumes, this contains the storage location of the volume (within `/var/lib/docker/volumes/`). For bind-mounts, and `npipe`, this contains the source (host) part of the bind-mount. For `tmpfs` mount points, this field is empty.
        Destination:
          type:
          - string
          - 'null'
          description: Destination is the path relative to the container root (`/`) where the `Source` is mounted inside the container.
        Driver:
          type:
          - string
          - 'null'
          description: Driver is the volume driver used to create the volume (if it is a volume).
        Mode:
          type:
          - string
          - 'null'
          description: Mode is a comma separated list of options supplied by the user when creating the bind/volume mount.  The default is platform-specific (`\"z\"` on Linux, empty on Windows).
        RW:
          type:
          - boolean
          - 'null'
          description: Whether the mount is mounted writable (read-write).
        Propagation:
          type:
          - string
          - 'null'
          description: Propagation describes how mounts are propagated from the host into the mount point, and vice-versa. Refer to the [Linux kernel documentation](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt) for details. This field is not used on Windows.
    MountPointTypeEnum:
      type: string
      enum:
      - EMPTY
      - bind
      - volume
      - tmpfs
      - npipe
      - cluster
    MountTmpfsOptions:
      type: object
      description: Optional configuration for the `tmpfs` type.
      properties:
        SizeBytes:
          type:
          - integer
          - 'null'
          format: int64
          description: The size for the tmpfs mount in bytes.
        Mode:
          type:
          - integer
          - 'null'
          format: int64
          description: The permission mode for the tmpfs mount in an integer.
    MountTypeEnum:
      type: string
      enum:
      - EMPTY
      - bind
      - volume
      - tmpfs
      - npipe
      - cluster
    MountVolumeOptions:
      type: object
      description: Optional configuration for the `volume` type.
      properties:
        NoCopy:
          type:
          - boolean
          - 'null'
          description: Populate volume with data from the target.
        Labels:
          type:
          - object
          - 'null'
          description: User-defined key/value metadata.
          additionalProperties:
            type: string
          propertyNames:
            type: string
        DriverConfig:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/MountVolumeOptionsDriverConfig'
        Subpath:
          type:
          - string
          - 'null'
          description: Source path inside the volume. Must be relative without any back traversals.
    MountVolumeOptionsDriverConfig:
      type: object
      description: Map of driver specific options
      properties:
        Name:
          type:
          - string
          - 'null'
          description: Name of the driver to use to create the volume.
        Options:
          type:
          - object
          - 'null'
          description: key/value map of driver specific options.
          additionalProperties:
            type: string
          propertyNames:
            type: string
    Namespace:
      type: object
      description: |-
        Namespace is a identifier for a set of cargoes
        It is used to group cargoes together
      required:
      - Name
      - CreatedAt
      properties:
        Name:
          type: string
          description: The name as primary key of the namespace
        CreatedAt:
          type: string
          format: date-time
          description: When the namespace was created
        Metadata:
          description: User defined metadata
    NamespaceInspect:
      type: object
      description: |-
        A Namespace Inspect is a detailed view of a namespace
        It is used to inspect a namespace
        It contains all the information about the namespace
        It also contains the list of cargoes
      required:
      - Name
      - Cargoes
      properties:
        Name:
          type: string
          description: Name of the namespace
        Cargoes:
          type: array
          items:
            $ref: '#/components/schemas/CargoInspect'
          description: Number of cargoes
    NamespacePartial:
      type: object
      description: A Namespace partial is a payload used to create a new namespace
      required:
      - Name
      properties:
        Name:
          type: string
          description: Name of the namespace
        Metadata:
          description: User defined metadata
      additionalProperties: false
    NamespaceSummary:
      type: object
      description: |-
        A Namespace Summary is a summary of a namespace
        It is used to list all the namespaces
        It contains the number of cargoes and instances existing in the namespace
      required:
      - Name
      - Cargoes
      - Instances
      - CreatedAt
      properties:
        Name:
          type: string
          description: Name of the namespace
        Cargoes:
          type: integer
          description: Number of cargoes
          minimum: 0
        Instances:
          type: integer
          description: Number of instances
          minimum: 0
        CreatedAt:
          type: string
          format: date-time
          description: When the namespace was created
    NativeEventAction:
      oneOf:
      - type: string
        enum:
        - create
      - type: string
        enum:
        - starting
      - type: string
        enum:
        - start
      - type: string
        enum:
        - updating
      - type: string
        enum:
        - update
      - type: string
        enum:
        - destroying
      - type: string
        enum:
        - destroy
      - type: string
        enum:
        - stopping
      - type: string
        enum:
        - stop
      - type: string
        enum:
        - restart
      - type: string
        enum:
        - finish
      - type: string
        enum:
        - fail
      - type: string
        enum:
        - die
      - type: string
        enum:
        - downloading
      - type: string
        enum:
        - download
      - type: object
        required:
        - other
        properties:
          other:
            type: string
      description: Action is the action that triggered the event
    Network:
      type: object
      properties:
        Name:
          type:
          - string
          - 'null'
        Id:
          type:
          - string
          - 'null'
        Created:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/String'
        Scope:
          type:
          - string
          - 'null'
        Driver:
          type:
          - string
          - 'null'
        EnableIPv6:
          type:
          - boolean
          - 'null'
        IPAM:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/Ipam'
        Internal:
          type:
          - boolean
          - 'null'
        Attachable:
          type:
          - boolean
          - 'null'
        Ingress:
          type:
          - boolean
          - 'null'
        Containers:
          type:
          - object
          - 'null'
          additionalProperties:
            $ref: '#/components/schemas/NetworkContainer'
          propertyNames:
            type: string
        Options:
          type:
          - object
          - 'null'
          additionalProperties:
            type: string
          propertyNames:
            type: string
        Labels:
          type:
          - object
          - 'null'
          additionalProperties:
            type: string
          propertyNames:
            type: string
    NetworkContainer:
      type: object
      properties:
        Name:
          type:
          - string
          - 'null'
        EndpointID:
          type:
          - string
          - 'null'
        MacAddress:
          type:
          - string
          - 'null'
        IPv4Address:
          type:
          - string
          - 'null'
        IPv6Address:
          type:
          - string
          - 'null'
    NetworkSettings:
      type: object
      description: NetworkSettings exposes the network settings in the API
      properties:
        Bridge:
          type:
          - string
          - 'null'
          description: Name of the default bridge interface when dockerd's --bridge flag is set.
        SandboxID:
          type:
          - string
          - 'null'
          description: SandboxID uniquely represents a container's network stack.
        HairpinMode:
          type:
          - boolean
          - 'null'
          description: 'Indicates if hairpin NAT should be enabled on the virtual interface.  Deprecated: This field is never set and will be removed in a future release.'
        LinkLocalIPv6Address:
          type:
          - string
          - 'null'
          description: 'IPv6 unicast address using the link-local prefix.  Deprecated: This field is never set and will be removed in a future release.'
        LinkLocalIPv6PrefixLen:
          type:
          - integer
          - 'null'
          format: int64
          description: 'Prefix length of the IPv6 unicast address.  Deprecated: This field is never set and will be removed in a future release.'
        Ports:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/HashMap'
        SandboxKey:
          type:
          - string
          - 'null'
          description: SandboxKey is the full path of the netns handle
        SecondaryIPAddresses:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/Address'
          description: 'Deprecated: This field is never set and will be removed in a future release.'
        SecondaryIPv6Addresses:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/Address'
          description: 'Deprecated: This field is never set and will be removed in a future release.'
        EndpointID:
          type:
          - string
          - 'null'
          description: 'EndpointID uniquely represents a service endpoint in a Sandbox.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0'
        Gateway:
          type:
          - string
          - 'null'
          description: 'Gateway address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0'
        GlobalIPv6Address:
          type:
          - string
          - 'null'
          description: 'Global IPv6 address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0'
        GlobalIPv6PrefixLen:
          type:
          - integer
          - 'null'
          format: int64
          description: 'Mask length of the global IPv6 address.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0'
        IPAddress:
          type:
          - string
          - 'null'
          description: 'IPv4 address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0'
        IPPrefixLen:
          type:
          - integer
          - 'null'
          format: int64
          description: 'Mask length of the IPv4 address.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0'
        IPv6Gateway:
          type:
          - string
          - 'null'
          description: 'IPv6 gateway address for this network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0'
        MacAddress:
          type:
          - string
          - 'null'
          description: 'MAC address for the container on the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0'
        Networks:
          type:
          - object
          - 'null'
          description: Information about all networks that the container is connected to.
          additionalProperties:
            $ref: '#/components/schemas/EndpointSettings'
          propertyNames:
            type: string
    NetworkStats:
      type: object
      description: Network statistics for the container.
      required:
      - rx_dropped
      - rx_bytes
      - rx_errors
      - tx_packets
      - tx_dropped
      - rx_packets
      - tx_errors
      - tx_bytes
      properties:
        rx_dropped:
          type: integer
          format: int64
          minimum: 0
        rx_bytes:
          type: integer
          format: int64
          minimum: 0
        rx_errors:
          type: integer
          format: int64
          minimum: 0
        tx_packets:
          type: integer
          format: int64
          minimum: 0
        tx_dropped:
          type: integer
          format: int64
          minimum: 0
        rx_packets:
          type: integer
          format: int64
          minimum: 0
        tx_errors:
          type: integer
          format: int64
          minimum: 0
        tx_bytes:
          type: integer
          format: int64
          minimum: 0
    NetworkingConfig_String:
      type: object
      description: This container's networking configuration.
      required:
      - EndpointsConfig
      properties:
        EndpointsConfig:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EndpointSettings'
          propertyNames:
            type: string
    Node:
      type: object
      required:
      - Name
      - CreatedAt
      - IpAddress
      - Endpoint
      - Version
      properties:
        Name:
          type: string
          description: The name of the node
        CreatedAt:
          type: string
          format: date-time
          description: The created at date
        IpAddress:
          type: string
          description: The ip address of the node
        Endpoint:
          type: string
          description: Endpoint to connect to the node
        Version:
          type: string
          description: Version of the node
        Metadata:
          description: User defined metadata
    ObjPsStatus:
      type: object
      required:
      - UpdatedAt
      - Wanted
      - PrevWanted
      - Actual
      - PrevActual
      properties:
        UpdatedAt:
          type: string
          format: date-time
        Wanted:
          $ref: '#/components/schemas/ObjPsStatusKind'
        PrevWanted:
          $ref: '#/components/schemas/ObjPsStatusKind'
        Actual:
          $ref: '#/components/schemas/ObjPsStatusKind'
        PrevActual:
          $ref: '#/components/schemas/ObjPsStatusKind'
    ObjPsStatusKind:
      type: string
      enum:
      - create
      - starting
      - start
      - updating
      - update
      - destroying
      - destroy
      - stopping
      - stop
      - fail
      - finish
      - unknown
    ObjectVersion:
      type: object
      description: The version number of the object such as node, service, etc. This is needed to avoid conflicting writes. The client must send the version number along with the modified specification when updating these objects.  This approach ensures safe concurrency and determinism in that the change on the object may not be applied if the version number has changed from the last read. In other words, if two update requests specify the same base version, only one of the requests can succeed. As a result, two separate update requests that happen at the same time will not unintentionally overwrite each other.
      properties:
        Index:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
    PeerNode:
      type: object
      description: Represents a peer-node in the swarm
      properties:
        NodeID:
          type:
          - string
          - 'null'
          description: Unique identifier of for this node in the swarm.
        Addr:
          type:
          - string
          - 'null'
          description: IP address and ports at which this node can be reached.
    PidsStats:
      type: object
      description: Process ID statistics for the container.
      properties:
        current:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        limit:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
    PluginsInfo:
      type: object
      description: 'Available plugins per type.  <p><br /></p>  > **Note**: Only unmanaged (V1) plugins are included in this list. > V1 plugins are \"lazily\" loaded, and are not returned in this list > if there is no resource using the plugin.'
      properties:
        Volume:
          type:
          - array
          - 'null'
          items:
            type: string
          description: Names of available volume-drivers, and network-driver plugins.
        Network:
          type:
          - array
          - 'null'
          items:
            type: string
          description: Names of available network-drivers, and network-driver plugins.
        Authorization:
          type:
          - array
          - 'null'
          items:
            type: string
          description: Names of available authorization plugins.
        Log:
          type:
          - array
          - 'null'
          items:
            type: string
          description: Names of available logging-drivers, and logging-driver plugins.
    Primitive:
      oneOf:
      - type: string
      - type: number
        format: double
      - type: boolean
    Process:
      type: object
      description: Represents a process (Vm, Job, Cargo)
      required:
      - Key
      - CreatedAt
      - UpdatedAt
      - Name
      - Kind
      - NodeName
      - KindKey
      - Data
      properties:
        Key:
          type: string
          description: The key of the process
        CreatedAt:
          type: string
          format: date-time
          description: The created at date
        UpdatedAt:
          type: string
          format: date-time
          description: Last time the instance was updated
        Name:
          type: string
          description: Name of the process
        Kind:
          $ref: '#/components/schemas/ProcessKind'
          description: Kind of the process (Job, Vm, Cargo)
        NodeName:
          type: string
          description: Name of the node where the container is running
        KindKey:
          type: string
          description: Key of the related kind
        Data:
          $ref: '#/components/schemas/ContainerInspectResponse'
          description: The data of the process a ContainerInspect
    ProcessConfig:
      type: object
      properties:
        privileged:
          type:
          - boolean
          - 'null'
        user:
          type:
          - string
          - 'null'
        tty:
          type:
          - boolean
          - 'null'
        entrypoint:
          type:
          - string
          - 'null'
        arguments:
          type:
          - array
          - 'null'
          items:
            type: string
    ProcessKind:
      type: string
      description: Kind of process (Vm, Job, Cargo)
      enum:
      - vm
      - job
      - cargo
    ProcessStats:
      type: object
      description: Stats of a process
      required:
      - Name
      - Stats
      properties:
        Name:
          type: string
        Stats:
          $ref: '#/components/schemas/Stats'
    RegistryServiceConfig:
      type: object
      description: RegistryServiceConfig stores daemon registry services configuration.
      properties:
        AllowNondistributableArtifactsCIDRs:
          type:
          - array
          - 'null'
          items:
            type: string
          description: 'List of IP ranges to which nondistributable artifacts can be pushed, using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior, and enables the daemon to push nondistributable artifacts to all registries whose resolved IP address is within the subnet described by the CIDR syntax.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.  > **Warning**: Nondistributable artifacts typically have restrictions > on how and where they can be distributed and shared. Only use this > feature to push artifacts to private registries and ensure that you > are in compliance with any terms that cover redistributing > nondistributable artifacts.'
        AllowNondistributableArtifactsHostnames:
          type:
          - array
          - 'null'
          items:
            type: string
          description: 'List of registry hostnames to which nondistributable artifacts can be pushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior for the specified registries.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.  > **Warning**: Nondistributable artifacts typically have restrictions > on how and where they can be distributed and shared. Only use this > feature to push artifacts to private registries and ensure that you > are in compliance with any terms that cover redistributing > nondistributable artifacts.'
        InsecureRegistryCIDRs:
          type:
          - array
          - 'null'
          items:
            type: string
          description: 'List of IP ranges of insecure registries, using the CIDR syntax ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.  By default, local registries (`127.0.0.0/8`) are configured as insecure. All other registries are secure. Communicating with an insecure registry is not possible if the daemon assumes that registry is secure.  This configuration override this behavior, insecure communication with registries whose resolved IP address is within the subnet described by the CIDR syntax.  Registries can also be marked insecure by hostname. Those registries are listed under `IndexConfigs` and have their `Secure` field set to `false`.  > **Warning**: Using this option can be useful when running a local > registry, but introduces security vulnerabilities. This option > should therefore ONLY be used for testing purposes. For increased > security, users should add their CA to their system''s list of trusted > CAs instead of enabling this option.'
        IndexConfigs:
          type:
          - object
          - 'null'
          additionalProperties:
            $ref: '#/components/schemas/IndexInfo'
          propertyNames:
            type: string
        Mirrors:
          type:
          - array
          - 'null'
          items:
            type: string
          description: List of registry URLs that act as a mirror for the official (`docker.io`) registry.
    ReplicationMode:
      oneOf:
      - type: object
        description: |-
          Auto is used to automatically define that the number of replicas in the cluster
          This will ensure at least 1 replica exists in the cluster
          And automatically add more replicas in the cluster if needed for redundancy
        required:
        - Mode
        properties:
          Mode:
            type: string
            enum:
            - Auto
      - type: object
        description: Unique is used to ensure that only one replica exists in the cluster
        required:
        - Mode
        properties:
          Mode:
            type: string
            enum:
            - Unique
      - type: object
        description: UniqueByNode is used to ensure one replica is running on each node
        required:
        - Mode
        properties:
          Mode:
            type: string
            enum:
            - UniqueByNode
      - type: object
        description: UniqueByNodeGroups is used to ensure one replica is running on each node group
        required:
        - groups
        - Mode
        properties:
          groups:
            type: array
            items:
              type: string
          Mode:
            type: string
            enum:
            - UniqueByNodeGroups
      - type: object
        description: UniqueByNodeNames is used to ensure one replica is running on each node name
        required:
        - names
        - Mode
        properties:
          names:
            type: array
            items:
              type: string
          Mode:
            type: string
            enum:
            - UniqueByNodeNames
      - allOf:
        - $ref: '#/components/schemas/ReplicationStatic'
          description: Number is used to manually set the number of replicas in one node
        - type: object
          required:
          - Mode
          properties:
            Mode:
              type: string
              enum:
              - Static
        description: Number is used to manually set the number of replicas in one node
      - allOf:
        - $ref: '#/components/schemas/ReplicationStatic'
          description: NumberByNodes is used to manually set the number of replicas in each node
        - type: object
          required:
          - Mode
          properties:
            Mode:
              type: string
              enum:
              - StaticByNodes
        description: NumberByNodes is used to manually set the number of replicas in each node
      - type: object
        description: NumberByNodeGroups is used to manually set the number of replicas in each node group
        required:
        - groups
        - number
        - Mode
        properties:
          groups:
            type: array
            items:
              type: string
          number:
            type: integer
            format: int64
          Mode:
            type: string
            enum:
            - StaticByNodeGroups
      - type: object
        description: NumberByNodeNames is used to manually set the number of replicas in each node name
        required:
        - names
        - number
        - Mode
        properties:
          names:
            type: array
            items:
              type: string
          number:
            type: integer
            format: int64
          Mode:
            type: string
            enum:
            - StaticByNodeNames
      description: |-
        Auto is used to automatically define that the number of replicas in the cluster
        Number is used to manually set the number of replicas
        Note: auto will ensure at least 1 replica exists in the cluster
    ReplicationStatic:
      type: object
      required:
      - Number
      properties:
        Number:
          type: integer
          minimum: 0
      additionalProperties: false
    Resource:
      type: object
      description: |-
        Resource is a specification with a name and a kind
        It is used to define [proxy rules](ProxyRule) and other kind of spec
      required:
      - Kind
      - CreatedAt
      - Spec
      properties:
        Kind:
          type: string
          description: The kind of the resource
        CreatedAt:
          type: string
          format: date-time
          description: The creation date of the resource
        Spec:
          $ref: '#/components/schemas/ResourceSpec'
          description: Specification of the ressource
    ResourceKind:
      type: object
      required:
      - Name
      - Version
      - CreatedAt
      - Data
      properties:
        Name:
          type: string
          description: Name of the kind
        Version:
          type: string
          description: When the kind have been created
        CreatedAt:
          type: string
          format: date-time
          description: When the kind have been created
        Metadata:
          description: When the kind have been created
        Data:
          $ref: '#/components/schemas/ResourceKindSpec'
          description: When the kind have been created
      additionalProperties: false
    ResourceKindInspect:
      type: object
      required:
      - Name
      - CreatedAt
      - Versions
      properties:
        Name:
          type: string
          description: Name of the kind
        CreatedAt:
          type: string
          format: date-time
          description: When the kind have been created
        Versions:
          type: array
          items:
            $ref: '#/components/schemas/ResourceKindVersion'
          description: List of versions available
      additionalProperties: false
    ResourceKindPartial:
      type: object
      description: |-
        This structure is a partial representation of a resource kind.
        Used to define a new kind type for plugins.
      required:
      - Name
      - Version
      - Data
      properties:
        Name:
          type: string
          description: The name of the resource kind
        Version:
          type: string
          description: The version of the resource kind
        Metadata:
          type: object
          description: Metadata (user defined) of the resource kind
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
        Data:
          $ref: '#/components/schemas/ResourceKindSpec'
          description: Spec of the resource kind
      additionalProperties: false
    ResourceKindSpec:
      type: object
      description: |-
        Specification of a resource kind.
        Depending on the spec it will validate a JSONSchema or call a service.
      properties:
        Schema:
          type: object
          description: The JSONSchema of the resource of this kind and version
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
        Url:
          type:
          - string
          - 'null'
          description: The service to call when creating, updating or deleting a resource of this kind and version
      additionalProperties: false
    ResourceKindVersion:
      type: object
      required:
      - Key
      - CreatedAt
      - KindKey
      - Version
      - Data
      properties:
        Key:
          type: string
          format: uuid
          description: Key of the version
        CreatedAt:
          type: string
          format: date-time
          description: When the version have been created
        KindKey:
          type: string
          description: Kind linked to this version
        Version:
          type: string
          description: Version
        Metadata:
          type: object
          description: Metadata (user defined)
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
        Data:
          $ref: '#/components/schemas/ResourceKindSpec'
          description: Spec of the kind
      additionalProperties: false
    ResourcePartial:
      type: object
      description: Payload used to create a new resource
      required:
      - Name
      - Kind
      - Data
      properties:
        Name:
          type: string
          description: The name of the resource
        Kind:
          type: string
          description: The kind of the resource
        Data:
          type: object
          description: The data of the resource (json object)
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
        Metadata:
          type: object
          description: The metadata of the resource (user defined)
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
      additionalProperties: false
    ResourceSpec:
      type: object
      description: The spec of a resource once created in the system
      required:
      - Key
      - Version
      - CreatedAt
      - ResourceKey
      - Data
      properties:
        Key:
          type: string
          format: uuid
          description: Key of the resource
        Version:
          type: string
          description: Version of the resource
        CreatedAt:
          type: string
          format: date-time
          description: The creation date of the resource
        ResourceKey:
          type: string
          description: Resource key associated with the data
        Data:
          type: object
          description: The data of the resource as a json object
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
        Metadata:
          type: object
          description: The metadata of the resource (user defined)
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
      additionalProperties: false
    ResourceUpdate:
      type: object
      description: Payload used to update a resource
      required:
      - Data
      properties:
        Data:
          type: object
          description: The spec of the resource as a json object
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
        Metadata:
          type: object
          description: The metadata of the resource as a json object
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
      additionalProperties: false
    ResourcesBlkioWeightDevice:
      type: object
      properties:
        Path:
          type:
          - string
          - 'null'
        Weight:
          type:
          - integer
          - 'null'
          minimum: 0
    ResourcesUlimits:
      type: object
      properties:
        Name:
          type:
          - string
          - 'null'
          description: Name of ulimit
        Soft:
          type:
          - integer
          - 'null'
          format: int64
          description: Soft limit
        Hard:
          type:
          - integer
          - 'null'
          format: int64
          description: Hard limit
    RestartPolicy:
      type: object
      description: The behavior to apply when the container exits. The default is not to restart.  An ever increasing delay (double the previous delay, starting at 100ms) is added before each restart to prevent flooding the server.
      properties:
        Name:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/RestartPolicyNameEnum'
            description: '- Empty string means not to restart - `no` Do not automatically restart - `always` Always restart - `unless-stopped` Restart always except when the user has manually stopped the container - `on-failure` Restart only when the container exit code is non-zero'
        MaximumRetryCount:
          type:
          - integer
          - 'null'
          format: int64
          description: If `on-failure` is used, the number of times to retry before giving up.
    RestartPolicyNameEnum:
      type: string
      enum:
      - EMPTY
      - no
      - always
      - unless-stopped
      - on-failure
    Runtime:
      type: object
      description: Runtime describes an [OCI compliant](https://github.com/opencontainers/runtime-spec) runtime.  The runtime is invoked by the daemon via the `containerd` daemon. OCI runtimes act as an interface to the Linux kernel namespaces, cgroups, and SELinux.
      properties:
        path:
          type:
          - string
          - 'null'
          description: Name and, optional, path, of the OCI executable binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result.
        runtimeArgs:
          type:
          - array
          - 'null'
          items:
            type: string
          description: List of command-line arguments to pass to the runtime when invoked.
        status:
          type:
          - object
          - 'null'
          description: 'Information specific to the runtime.  While this API specification does not define data provided by runtimes, the following well-known properties may be provided by runtimes:  `org.opencontainers.runtime-spec.features`: features structure as defined in the [OCI Runtime Specification](https://github.com/opencontainers/runtime-spec/blob/main/features.md), in a JSON string representation.  <p><br /></p>  > **Note**: The information returned in this field, including the > formatting of values and labels, should not be considered stable, > and may change without notice.'
          additionalProperties:
            type: string
          propertyNames:
            type: string
    Secret:
      type: object
      description: |-
        This structure represent the secret in the database.
        A secret is a key/value pair that can be used by the user to store
        sensitive data. It is stored as a json object in the database.
      required:
      - Name
      - CreatedAt
      - UpdatedAt
      - Kind
      - Immutable
      - Data
      properties:
        Name:
          type: string
          description: The name of the secret
        CreatedAt:
          type: string
          format: date-time
          description: The creation date
        UpdatedAt:
          type: string
          format: date-time
          description: The last update date
        Kind:
          type: string
          description: The kind of secret
        Immutable:
          type: boolean
          description: The secret cannot be updated
        Metadata:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
        Data:
          type: object
          description: The secret data
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
    SecretPartial:
      type: object
      description: |-
        A partial secret object. This is used to create a secret.
        A secret is a key/value pair that can be used by the user to store
        sensitive data. It is stored as a json object in the database.
      required:
      - Name
      - Kind
      - Data
      properties:
        Name:
          type: string
          description: The name of the secret
        Kind:
          type: string
          description: The kind of secret
        Immutable:
          type: boolean
          description: The secret cannot be updated
        Metadata:
          type: object
          description: The metadata of the resource (user defined)
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
        Data:
          type: object
          description: The secret data
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
      additionalProperties: false
    SecretUpdate:
      type: object
      description: This structure is used to update a secret.
      required:
      - Data
      properties:
        Metadata:
          type: object
          description: The metadata of the secret (user defined)
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
        Data:
          type: object
          description: The data of the secret as a json object
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
      additionalProperties: false
    SslConfig:
      type: object
      properties:
        Cert:
          type:
          - string
          - 'null'
        CertKey:
          type:
          - string
          - 'null'
        CertCa:
          type:
          - string
          - 'null'
    StartExecOptions:
      type: object
      description: Exec configuration used in the [Create Exec API](Docker::create_exec())
      required:
      - Detach
      - Tty
      properties:
        Detach:
          type: boolean
          description: Detach from the command.
        Tty:
          type: boolean
          description: Allocate a pseudo-TTY.
        OutputCapacity:
          type:
          - integer
          - 'null'
          description: The maximum size for a line of output. The default is 8 * 1024 (roughly 1024 characters).
          minimum: 0
    Stats:
      type: object
      description: Statistics for the container.
      required:
      - read
      - preread
      - num_procs
      - pids_stats
      - memory_stats
      - blkio_stats
      - cpu_stats
      - precpu_stats
      - storage_stats
      properties:
        read:
          type: string
        preread:
          type: string
        num_procs:
          type: integer
          format: int32
          minimum: 0
        pids_stats:
          $ref: '#/components/schemas/PidsStats'
        network:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/NetworkStats'
        networks:
          type:
          - object
          - 'null'
          additionalProperties:
            $ref: '#/components/schemas/NetworkStats'
          propertyNames:
            type: string
        memory_stats:
          $ref: '#/components/schemas/MemoryStats'
        blkio_stats:
          $ref: '#/components/schemas/BlkioStats'
        cpu_stats:
          $ref: '#/components/schemas/CPUStats'
        precpu_stats:
          $ref: '#/components/schemas/CPUStats'
        storage_stats:
          $ref: '#/components/schemas/StorageStats'
        name:
          type: string
        id:
          type: string
    StorageStats:
      type: object
      description: File I/O statistics for the container.
      properties:
        read_count_normalized:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        read_size_bytes:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        write_count_normalized:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        write_size_bytes:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
    String:
      type: string
    SwarmInfo:
      type: object
      description: Represents generic information about swarm.
      properties:
        NodeID:
          type:
          - string
          - 'null'
          description: Unique identifier of for this node in the swarm.
        NodeAddr:
          type:
          - string
          - 'null'
          description: IP address at which this node can be reached by other nodes in the swarm.
        LocalNodeState:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/LocalNodeState'
        ControlAvailable:
          type:
          - boolean
          - 'null'
        Error:
          type:
          - string
          - 'null'
        RemoteManagers:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/PeerNode'
          description: List of ID's and addresses of other managers in the swarm.
        Nodes:
          type:
          - integer
          - 'null'
          format: int64
          description: Total number of nodes in the swarm.
        Managers:
          type:
          - integer
          - 'null'
          format: int64
          description: Total number of managers in the swarm.
        Cluster:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/ClusterInfo'
    SwarmSpec:
      type: object
      description: User modifiable swarm configuration.
      properties:
        Name:
          type:
          - string
          - 'null'
          description: Name of the swarm.
        Labels:
          type:
          - object
          - 'null'
          description: User-defined key/value metadata.
          additionalProperties:
            type: string
          propertyNames:
            type: string
        Orchestration:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/SwarmSpecOrchestration'
        Raft:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/SwarmSpecRaft'
        Dispatcher:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/SwarmSpecDispatcher'
        CAConfig:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/SwarmSpecCaConfig'
        EncryptionConfig:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/SwarmSpecEncryptionConfig'
        TaskDefaults:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/SwarmSpecTaskDefaults'
    SwarmSpecCaConfig:
      type: object
      description: CA configuration.
      properties:
        NodeCertExpiry:
          type:
          - integer
          - 'null'
          format: int64
          description: The duration node certificates are issued for.
        ExternalCAs:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/SwarmSpecCaConfigExternalCas'
          description: Configuration for forwarding signing requests to an external certificate authority.
        SigningCACert:
          type:
          - string
          - 'null'
          description: The desired signing CA certificate for all swarm node TLS leaf certificates, in PEM format.
        SigningCAKey:
          type:
          - string
          - 'null'
          description: The desired signing CA key for all swarm node TLS leaf certificates, in PEM format.
        ForceRotate:
          type:
          - integer
          - 'null'
          format: int64
          description: An integer whose purpose is to force swarm to generate a new signing CA certificate and key, if none have been specified in `SigningCACert` and `SigningCAKey`
          minimum: 0
    SwarmSpecCaConfigExternalCas:
      type: object
      properties:
        Protocol:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/SwarmSpecCaConfigExternalCasProtocolEnum'
            description: Protocol for communication with the external CA (currently only `cfssl` is supported).
        URL:
          type:
          - string
          - 'null'
          description: URL where certificate signing requests should be sent.
        Options:
          type:
          - object
          - 'null'
          description: An object with key/value pairs that are interpreted as protocol-specific options for the external CA driver.
          additionalProperties:
            type: string
          propertyNames:
            type: string
        CACert:
          type:
          - string
          - 'null'
          description: The root CA certificate (in PEM format) this external CA uses to issue TLS certificates (assumed to be to the current swarm root CA certificate if not provided).
    SwarmSpecCaConfigExternalCasProtocolEnum:
      type: string
      enum:
      - EMPTY
      - cfssl
    SwarmSpecDispatcher:
      type: object
      description: Dispatcher configuration.
      properties:
        HeartbeatPeriod:
          type:
          - integer
          - 'null'
          format: int64
          description: The delay for an agent to send a heartbeat to the dispatcher.
    SwarmSpecEncryptionConfig:
      type: object
      description: Parameters related to encryption-at-rest.
      properties:
        AutoLockManagers:
          type:
          - boolean
          - 'null'
          description: If set, generate a key and use it to lock data stored on the managers.
    SwarmSpecOrchestration:
      type: object
      description: Orchestration configuration.
      properties:
        TaskHistoryRetentionLimit:
          type:
          - integer
          - 'null'
          format: int64
          description: The number of historic tasks to keep per instance or node. If negative, never remove completed or failed tasks.
    SwarmSpecRaft:
      type: object
      description: Raft configuration.
      properties:
        SnapshotInterval:
          type:
          - integer
          - 'null'
          format: int64
          description: The number of log entries between snapshots.
          minimum: 0
        KeepOldSnapshots:
          type:
          - integer
          - 'null'
          format: int64
          description: The number of snapshots to keep beyond the current snapshot.
          minimum: 0
        LogEntriesForSlowFollowers:
          type:
          - integer
          - 'null'
          format: int64
          description: The number of log entries to keep around to sync up slow followers after a snapshot is created.
          minimum: 0
        ElectionTick:
          type:
          - integer
          - 'null'
          format: int64
          description: The number of ticks that a follower will wait for a message from the leader before becoming a candidate and starting an election. `ElectionTick` must be greater than `HeartbeatTick`.  A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.
        HeartbeatTick:
          type:
          - integer
          - 'null'
          format: int64
          description: The number of ticks between heartbeats. Every HeartbeatTick ticks, the leader will send a heartbeat to the followers.  A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.
    SwarmSpecTaskDefaults:
      type: object
      description: Defaults for creating tasks in this cluster.
      properties:
        LogDriver:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/SwarmSpecTaskDefaultsLogDriver'
    SwarmSpecTaskDefaultsLogDriver:
      type: object
      description: The log driver to use for tasks created in the orchestrator if unspecified by a service.  Updating this value only affects new tasks. Existing tasks continue to use their previously configured log driver until recreated.
      properties:
        Name:
          type:
          - string
          - 'null'
          description: The log driver to use as a default for new tasks.
        Options:
          type:
          - object
          - 'null'
          description: Driver-specific options for the selectd log driver, specified as key/value pairs.
          additionalProperties:
            type: string
          propertyNames:
            type: string
    SystemInfo:
      type: object
      properties:
        ID:
          type:
          - string
          - 'null'
          description: 'Unique identifier of the daemon.  <p><br /></p>  > **Note**: The format of the ID itself is not part of the API, and > should not be considered stable.'
        Containers:
          type:
          - integer
          - 'null'
          format: int64
          description: Total number of containers on the host.
        ContainersRunning:
          type:
          - integer
          - 'null'
          format: int64
          description: Number of containers with status `\"running\"`.
        ContainersPaused:
          type:
          - integer
          - 'null'
          format: int64
          description: Number of containers with status `\"paused\"`.
        ContainersStopped:
          type:
          - integer
          - 'null'
          format: int64
          description: Number of containers with status `\"stopped\"`.
        Images:
          type:
          - integer
          - 'null'
          format: int64
          description: Total number of images on the host.  Both _tagged_ and _untagged_ (dangling) images are counted.
        Driver:
          type:
          - string
          - 'null'
          description: Name of the storage driver in use.
        DriverStatus:
          type:
          - array
          - 'null'
          items:
            type: array
            items:
              type: string
          description: 'Information specific to the storage driver, provided as \"label\" / \"value\" pairs.  This information is provided by the storage driver, and formatted in a way consistent with the output of `docker info` on the command line.  <p><br /></p>  > **Note**: The information returned in this field, including the > formatting of values and labels, should not be considered stable, > and may change without notice.'
        DockerRootDir:
          type:
          - string
          - 'null'
          description: Root directory of persistent Docker state.  Defaults to `/var/lib/docker` on Linux, and `C:\\ProgramData\\docker` on Windows.
        Plugins:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/PluginsInfo'
        MemoryLimit:
          type:
          - boolean
          - 'null'
          description: Indicates if the host has memory limit support enabled.
        SwapLimit:
          type:
          - boolean
          - 'null'
          description: Indicates if the host has memory swap limit support enabled.
        KernelMemoryTCP:
          type:
          - boolean
          - 'null'
          description: Indicates if the host has kernel memory TCP limit support enabled. This field is omitted if not supported.  Kernel memory TCP limits are not supported when using cgroups v2, which does not support the corresponding `memory.kmem.tcp.limit_in_bytes` cgroup.
        CpuCfsPeriod:
          type:
          - boolean
          - 'null'
          description: Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host.
        CpuCfsQuota:
          type:
          - boolean
          - 'null'
          description: Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host.
        CPUShares:
          type:
          - boolean
          - 'null'
          description: Indicates if CPU Shares limiting is supported by the host.
        CPUSet:
          type:
          - boolean
          - 'null'
          description: Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)
        PidsLimit:
          type:
          - boolean
          - 'null'
          description: Indicates if the host kernel has PID limit support enabled.
        OomKillDisable:
          type:
          - boolean
          - 'null'
          description: Indicates if OOM killer disable is supported on the host.
        IPv4Forwarding:
          type:
          - boolean
          - 'null'
          description: Indicates IPv4 forwarding is enabled.
        BridgeNfIptables:
          type:
          - boolean
          - 'null'
          description: Indicates if `bridge-nf-call-iptables` is available on the host.
        BridgeNfIp6tables:
          type:
          - boolean
          - 'null'
          description: Indicates if `bridge-nf-call-ip6tables` is available on the host.
        Debug:
          type:
          - boolean
          - 'null'
          description: Indicates if the daemon is running in debug-mode / with debug-level logging enabled.
        NFd:
          type:
          - integer
          - 'null'
          format: int64
          description: The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode is enabled.
        NGoroutines:
          type:
          - integer
          - 'null'
          format: int64
          description: The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled.
        SystemTime:
          type:
          - string
          - 'null'
          description: Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
        LoggingDriver:
          type:
          - string
          - 'null'
          description: The logging driver to use as a default for new containers.
        CgroupDriver:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/SystemInfoCgroupDriverEnum'
            description: The driver to use for managing cgroups.
        CgroupVersion:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/SystemInfoCgroupVersionEnum'
            description: The version of the cgroup.
        NEventsListener:
          type:
          - integer
          - 'null'
          format: int64
          description: Number of event listeners subscribed.
        KernelVersion:
          type:
          - string
          - 'null'
          description: Kernel version of the host.  On Linux, this information obtained from `uname`. On Windows this information is queried from the <kbd>HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\</kbd> registry value, for example _\"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)\"_.
        OperatingSystem:
          type:
          - string
          - 'null'
          description: 'Name of the host''s operating system, for example: \"Ubuntu 16.04.2 LTS\" or \"Windows Server 2016 Datacenter\"'
        OSVersion:
          type:
          - string
          - 'null'
          description: 'Version of the host''s operating system  <p><br /></p>  > **Note**: The information returned in this field, including its > very existence, and the formatting of values, should not be considered > stable, and may change without notice.'
        OSType:
          type:
          - string
          - 'null'
          description: Generic type of the operating system of the host, as returned by the Go runtime (`GOOS`).  Currently returned values are \"linux\" and \"windows\". A full list of possible values can be found in the [Go documentation](https://go.dev/doc/install/source#environment).
        Architecture:
          type:
          - string
          - 'null'
          description: Hardware architecture of the host, as returned by the Go runtime (`GOARCH`).  A full list of possible values can be found in the [Go documentation](https://go.dev/doc/install/source#environment).
        NCPU:
          type:
          - integer
          - 'null'
          format: int64
          description: The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not reflected.
        MemTotal:
          type:
          - integer
          - 'null'
          format: int64
          description: Total amount of physical memory available on the host, in bytes.
        IndexServerAddress:
          type:
          - string
          - 'null'
          description: Address / URL of the index server that is used for image search, and as a default for user authentication for Docker Hub and Docker Cloud.
        RegistryConfig:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/RegistryServiceConfig'
        GenericResources:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/GenericResourcesInner'
        HttpProxy:
          type:
          - string
          - 'null'
          description: HTTP-proxy configured for the daemon. This value is obtained from the [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration.
        HttpsProxy:
          type:
          - string
          - 'null'
          description: HTTPS-proxy configured for the daemon. This value is obtained from the [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration.
        NoProxy:
          type:
          - string
          - 'null'
          description: Comma-separated list of domain extensions for which no proxy should be used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration.
        Name:
          type:
          - string
          - 'null'
          description: Hostname of the host.
        Labels:
          type:
          - array
          - 'null'
          items:
            type: string
          description: 'User-defined labels (key/value metadata) as set on the daemon.  <p><br /></p>  > **Note**: When part of a Swarm, nodes can both have _daemon_ labels, > set through the daemon configuration, and _node_ labels, set from a > manager node in the Swarm. Node labels are not included in this > field. Node labels can be retrieved using the `/nodes/(id)` endpoint > on a manager node in the Swarm.'
        ExperimentalBuild:
          type:
          - boolean
          - 'null'
          description: Indicates if experimental features are enabled on the daemon.
        ServerVersion:
          type:
          - string
          - 'null'
          description: Version string of the daemon.
        Runtimes:
          type:
          - object
          - 'null'
          description: List of [OCI compliant](https://github.com/opencontainers/runtime-spec) runtimes configured on the daemon. Keys hold the \"name\" used to reference the runtime.  The Docker daemon relies on an OCI compliant runtime (invoked via the `containerd` daemon) as its interface to the Linux kernel namespaces, cgroups, and SELinux.  The default runtime is `runc`, and automatically configured. Additional runtimes can be configured by the user and will be listed here.
          additionalProperties:
            $ref: '#/components/schemas/Runtime'
          propertyNames:
            type: string
        DefaultRuntime:
          type:
          - string
          - 'null'
          description: Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container at create time.
        Swarm:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/SwarmInfo'
        LiveRestoreEnabled:
          type:
          - boolean
          - 'null'
          description: Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon daemon start if running containers are detected.
        Isolation:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/SystemInfoIsolationEnum'
            description: Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is `hyperv`, and on Windows server, the default is `process`.  This option is currently not used on other platforms.
        InitBinary:
          type:
          - string
          - 'null'
          description: Name and, optional, path of the `docker-init` binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result.
        ContainerdCommit:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/Commit'
        RuncCommit:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/Commit'
        InitCommit:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/Commit'
        SecurityOptions:
          type:
          - array
          - 'null'
          items:
            type: string
          description: List of security features that are enabled on the daemon, such as apparmor, seccomp, SELinux, user-namespaces (userns), rootless and no-new-privileges.  Additional configuration options for each security feature may be present, and are included as a comma-separated list of key/value pairs.
        ProductLicense:
          type:
          - string
          - 'null'
          description: Reports a summary of the product license on the daemon.  If a commercial license has been applied to the daemon, information such as number of nodes, and expiration are included.
        DefaultAddressPools:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/SystemInfoDefaultAddressPools'
          description: 'List of custom default address pools for local networks, which can be specified in the daemon.json file or dockerd option.  Example: a Base \"10.10.0.0/16\" with Size 24 will define the set of 256 10.10.[0-255].0/24 address pools.'
        Warnings:
          type:
          - array
          - 'null'
          items:
            type: string
          description: List of warnings / informational messages about missing features, or issues related to the daemon configuration.  These messages can be printed by the client as information to the user.
        CDISpecDirs:
          type:
          - array
          - 'null'
          items:
            type: string
          description: List of directories where (Container Device Interface) CDI specifications are located.  These specifications define vendor-specific modifications to an OCI runtime specification for a container being created.  An empty list indicates that CDI device injection is disabled.  Note that since using CDI device injection requires the daemon to have experimental enabled. For non-experimental daemons an empty list will always be returned.
    SystemInfoCgroupDriverEnum:
      type: string
      enum:
      - EMPTY
      - cgroupfs
      - systemd
      - none
    SystemInfoCgroupVersionEnum:
      type: string
      enum:
      - EMPTY
      - '1'
      - '2'
    SystemInfoDefaultAddressPools:
      type: object
      properties:
        Base:
          type:
          - string
          - 'null'
          description: The network address in CIDR format
        Size:
          type:
          - integer
          - 'null'
          format: int64
          description: The network pool size
    SystemInfoIsolationEnum:
      type: string
      enum:
      - EMPTY
      - default
      - hyperv
      - process
    ThrottleDevice:
      type: object
      properties:
        Path:
          type:
          - string
          - 'null'
          description: Device path
        Rate:
          type:
          - integer
          - 'null'
          format: int64
          description: Rate
    ThrottlingData:
      type: object
      description: CPU throttling statistics.
      required:
      - periods
      - throttled_periods
      - throttled_time
      properties:
        periods:
          type: integer
          format: int64
          minimum: 0
        throttled_periods:
          type: integer
          format: int64
          minimum: 0
        throttled_time:
          type: integer
          format: int64
          minimum: 0
    TlsInfo:
      type: object
      description: Information about the issuer of leaf TLS certificates and the trusted root CA certificate.
      properties:
        TrustRoot:
          type:
          - string
          - 'null'
          description: The root CA certificate(s) that are used to validate leaf TLS certificates.
        CertIssuerSubject:
          type:
          - string
          - 'null'
          description: The base64-url-safe-encoded raw subject bytes of the issuer.
        CertIssuerPublicKey:
          type:
          - string
          - 'null'
          description: The base64-url-safe-encoded raw public key bytes of the issuer.
    Vm:
      type: object
      description: A virtual machine instance
      required:
      - NamespaceName
      - CreatedAt
      - Status
      - Spec
      properties:
        NamespaceName:
          type: string
          description: Name of the namespace
        CreatedAt:
          type: string
          format: date-time
          description: When the vm was created
        Status:
          $ref: '#/components/schemas/ObjPsStatus'
          description: Status of the vm
        Spec:
          $ref: '#/components/schemas/VmSpec'
          description: Specification of the vm
    VmDisk:
      type: object
      description: Disk representation of a VM
      required:
      - Image
      properties:
        Image:
          type: string
          description: Name of the image to use
        Size:
          type:
          - integer
          - 'null'
          format: int64
          description: 'Virtual size allowed for the disk in GB (default: 20)'
          minimum: 0
      additionalProperties: false
    VmHostConfig:
      type: object
      description: A vm's resources (cpu, memory, network)
      required:
      - Cpu
      - Memory
      properties:
        Cpu:
          type: integer
          format: int64
          description: 'Number of cpu of the vm (default: 1)'
          minimum: 0
        Memory:
          type: integer
          format: int64
          description: 'Memory of the vm in MB (default: 512)'
          minimum: 0
        NetIface:
          type:
          - string
          - 'null'
          description: 'Network interface of the vm to setup (default: ens3)'
        LinkNetIface:
          type:
          - string
          - 'null'
          description: 'Network interface to link the vm (default: eth0)'
        Kvm:
          type:
          - boolean
          - 'null'
          description: 'Enable KVM acceleration (default: false)'
        Dns:
          type:
          - array
          - 'null'
          items:
            type: string
          description: A list of DNS servers for the vm to use
        Runtime:
          type:
          - string
          - 'null'
          description: 'Container image name to use for vm (default: nanocl-qemu)'
        RuntimeNetwork:
          type:
          - string
          - 'null'
        HostTun:
          type:
          - boolean
          - 'null'
          description: Use host tun device
      additionalProperties: false
    VmImage:
      type: object
      required:
      - Name
      - CreatedAt
      - Path
      - Kind
      - Format
      - SizeActual
      - SizeVirtual
      properties:
        Name:
          type: string
          description: The name of the image
        CreatedAt:
          type: string
          format: date-time
          description: When the image was created
        Path:
          type: string
          description: The path to the image
        Kind:
          type: string
          description: The type of the image
        Format:
          type: string
          description: The format of the image
        SizeActual:
          type: integer
          format: int64
          description: The actual size of the image in bytes
        SizeVirtual:
          type: integer
          format: int64
          description: The virtual size of the image in bytes
    VmImageResizePayload:
      type: object
      required:
      - Size
      - Shrink
      properties:
        Size:
          type: integer
          format: int64
          description: The new size of the image in bytes
          minimum: 0
        Shrink:
          type: boolean
          description: Whether to shrink the image or not
      additionalProperties: false
    VmInspect:
      type: object
      description: |-
        A Vm Inspect is a detailed view of a vm
        It is used to inspect a vm
        It contains all the information about the vm
        It also contains the list of containers
      required:
      - NamespaceName
      - CreatedAt
      - InstanceTotal
      - InstanceRunning
      - Status
      - Spec
      - Instances
      properties:
        NamespaceName:
          type: string
          description: Name of the namespace
        CreatedAt:
          type: string
          format: date-time
          description: Creation date of the vm
        InstanceTotal:
          type: integer
          description: Number of instances
          minimum: 0
        InstanceRunning:
          type: integer
          description: Number of running instances
          minimum: 0
        Status:
          $ref: '#/components/schemas/ObjPsStatus'
          description: Status of the vm
        Spec:
          $ref: '#/components/schemas/VmSpec'
          description: Specification of the vm
        Instances:
          type: array
          items:
            $ref: '#/components/schemas/Process'
          description: List of instances
    VmSpec:
      type: object
      description: |-
        A vm spec is the specification of a vm
        It used to know the state of the vm
        It keep tracking of an history when you patch an existing vm
      required:
      - Key
      - CreatedAt
      - Name
      - Version
      - VmKey
      - Disk
      - HostConfig
      properties:
        Key:
          type: string
          format: uuid
          description: Unique identifier of the vm spec
        CreatedAt:
          type: string
          format: date-time
          description: Creation date of the vm spec
        Name:
          type: string
          description: Name of the vm
        Version:
          type: string
          description: Version of the spec
        VmKey:
          type: string
          description: The key of the vm
        Metadata:
          type: object
          description: The metadata (user defined)
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
        Hostname:
          type:
          - string
          - 'null'
          description: Hostname of the vm
        Password:
          type:
          - string
          - 'null'
          description: Default password of the vm (cloud)
        SshKey:
          type:
          - string
          - 'null'
          description: Default ssh key for the user
        User:
          type:
          - string
          - 'null'
          description: Default user of the vm (cloud)
        Disk:
          $ref: '#/components/schemas/VmDisk'
          description: Disk config of the vm
        MacAddress:
          type:
          - string
          - 'null'
          description: Mac address of the vm
        Labels:
          type:
          - object
          - 'null'
          description: User-defined key/value metadata.
          additionalProperties:
            type: string
          propertyNames:
            type: string
        HostConfig:
          $ref: '#/components/schemas/VmHostConfig'
          description: A vm's resources (cpu, memory, network)
    VmSpecPartial:
      type: object
      description: A vm spec partial is used to create a vm
      required:
      - Name
      - Disk
      properties:
        Name:
          type: string
          description: Name of the vm
        Metadata:
          type: object
          description: The metadata (user defined)
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
        Hostname:
          type:
          - string
          - 'null'
          description: 'Hostname of the vm (default: generated from name)'
        User:
          type:
          - string
          - 'null'
          description: 'Default user of the vm (default: cloud)'
        Password:
          type:
          - string
          - 'null'
          description: 'Default password of the vm (default: cloud)'
        SshKey:
          type:
          - string
          - 'null'
          description: Default ssh pub key for the user (recommended)
        Disk:
          $ref: '#/components/schemas/VmDisk'
          description: Disk config of the vm (image, size) required
        MacAddress:
          type:
          - string
          - 'null'
          description: 'Mac address of the vm (default: generated)'
        Labels:
          type:
          - object
          - 'null'
          description: User-defined key/value metadata.
          additionalProperties:
            type: string
          propertyNames:
            type: string
        HostConfig:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/VmHostConfig'
            description: A vm's resources (cpu, memory, network)
      additionalProperties: false
    VmSpecUpdate:
      type: object
      description: |
        ## VmSpecUpdate

        Payload used to patch a vm
        It will create a new [VmSpec](VmSpec) with the new values
        and keep the old values in the history
      properties:
        Name:
          type:
          - string
          - 'null'
          description: Name of the vm
        Metadata:
          type: object
          description: The metadata (user defined)
          additionalProperties:
            $ref: '#/components/schemas/Any'
          propertyNames:
            type: string
        Hostname:
          type:
          - string
          - 'null'
          description: Hostname of the vm
        User:
          type:
          - string
          - 'null'
          description: Default user of the vm (cloud)
        Password:
          type:
          - string
          - 'null'
          description: Default password of the vm (cloud)
        SshKey:
          type:
          - string
          - 'null'
          description: Default ssh key for the user
        Labels:
          type:
          - object
          - 'null'
          description: User-defined key/value metadata.
          additionalProperties:
            type: string
          propertyNames:
            type: string
        HostConfig:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/VmHostConfig'
            description: A vm's resources (cpu, memory, network)
      additionalProperties: false
    VmSummary:
      type: object
      description: |-
        A Vm Summary is a summary of a vm
        It is used to list all the vms
      required:
      - NamespaceName
      - Status
      - CreatedAt
      - InstanceTotal
      - InstanceRunning
      - Spec
      properties:
        NamespaceName:
          type: string
          description: Name of the namespace
        Status:
          $ref: '#/components/schemas/ObjPsStatus'
          description: Status of the vm
        CreatedAt:
          type: string
          format: date-time
          description: Creation date of the vm
        InstanceTotal:
          type: integer
          description: Number of instances
          minimum: 0
        InstanceRunning:
          type: integer
          description: Number of running instances
          minimum: 0
        Spec:
          $ref: '#/components/schemas/VmSpec'
          description: Specification of the vm
tags:
- name: Namespaces
  description: Namespaces management endpoints.
- name: Nodes
  description: Nodes management endpoints.
- name: Resources
  description: Resources management endpoints.
- name: System
  description: General system endpoints.
- name: VmImages
  description: Virtual machine images management endpoints.
- name: Vms
  description: Virtual machines management endpoints.
- name: Metrics
  description: Metrics management endpoints.
- name: Processes
  description: Processes management endpoints.
- name: Secrets
  description: Secrets management endpoints.
- name: Jobs
  description: Jobs management endpoints.
- name: Events
  description: Events management endpoints.
